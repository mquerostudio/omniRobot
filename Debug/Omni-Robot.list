
Omni-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08005580  08005580  00015580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005878  08005878  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  080058f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080058f0  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca93  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f39  00000000  00000000  0002cb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c0c  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000deb0  00000000  00000000  00046d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf90  00000000  00000000  00054be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1b74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000e1bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005564 	.word	0x08005564

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005564 	.word	0x08005564

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <moveRobot>:
#include <math.h>
#include "motor.h"
#include "cinematic.h"
#include "robotparameters.h"

void moveRobot(float vel, float theta, int w){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ec2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ec6:	6078      	str	r0, [r7, #4]
	 * w1,w2,w3 are the angular velocities of each wheel in rpm
	 */


	//Calculate the Vx and Vy in m/s
	x = vel * cos(theta);
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff fae9 	bl	80004a0 <__aeabi_f2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	68b8      	ldr	r0, [r7, #8]
 8000ed4:	f7ff fae4 	bl	80004a0 <__aeabi_f2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	ec43 2b10 	vmov	d0, r2, r3
 8000ee0:	f003 faa2 	bl	8004428 <cos>
 8000ee4:	ec53 2b10 	vmov	r2, r3, d0
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4629      	mov	r1, r5
 8000eec:	f7ff fb30 	bl	8000550 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fe0c 	bl	8000b14 <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	y = vel * sin(theta);
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff facd 	bl	80004a0 <__aeabi_f2d>
 8000f06:	4604      	mov	r4, r0
 8000f08:	460d      	mov	r5, r1
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f7ff fac8 	bl	80004a0 <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	ec43 2b10 	vmov	d0, r2, r3
 8000f18:	f003 fada 	bl	80044d0 <sin>
 8000f1c:	ec53 2b10 	vmov	r2, r3, d0
 8000f20:	4620      	mov	r0, r4
 8000f22:	4629      	mov	r1, r5
 8000f24:	f7ff fb14 	bl	8000550 <__aeabi_dmul>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff fdf0 	bl	8000b14 <__aeabi_d2f>
 8000f34:	4603      	mov	r3, r0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28

	if(x < 0.05 && x > -0.05) x = 0;
 8000f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f3a:	f7ff fab1 	bl	80004a0 <__aeabi_f2d>
 8000f3e:	a3a7      	add	r3, pc, #668	; (adr r3, 80011dc <moveRobot+0x324>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff fd76 	bl	8000a34 <__aeabi_dcmplt>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00d      	beq.n	8000f6a <moveRobot+0xb2>
 8000f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f50:	f7ff faa6 	bl	80004a0 <__aeabi_f2d>
 8000f54:	a3a3      	add	r3, pc, #652	; (adr r3, 80011e4 <moveRobot+0x32c>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff fd89 	bl	8000a70 <__aeabi_dcmpgt>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <moveRobot+0xb2>
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(y < 0.05 && y > -0.05) y = 0;
 8000f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f6c:	f7ff fa98 	bl	80004a0 <__aeabi_f2d>
 8000f70:	a39a      	add	r3, pc, #616	; (adr r3, 80011dc <moveRobot+0x324>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff fd5d 	bl	8000a34 <__aeabi_dcmplt>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00d      	beq.n	8000f9c <moveRobot+0xe4>
 8000f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f82:	f7ff fa8d 	bl	80004a0 <__aeabi_f2d>
 8000f86:	a397      	add	r3, pc, #604	; (adr r3, 80011e4 <moveRobot+0x32c>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fd70 	bl	8000a70 <__aeabi_dcmpgt>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <moveRobot+0xe4>
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28

	//Calculate the influent in the velocity of each motor
	v1 = 0.58*x -0.33*y +0.33*w;
 8000f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f9e:	f7ff fa7f 	bl	80004a0 <__aeabi_f2d>
 8000fa2:	a392      	add	r3, pc, #584	; (adr r3, 80011ec <moveRobot+0x334>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fad2 	bl	8000550 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fb6:	f7ff fa73 	bl	80004a0 <__aeabi_f2d>
 8000fba:	a37f      	add	r3, pc, #508	; (adr r3, 80011b8 <moveRobot+0x300>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fac6 	bl	8000550 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff f908 	bl	80001e0 <__aeabi_dsub>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff fa4f 	bl	800047c <__aeabi_i2d>
 8000fde:	a376      	add	r3, pc, #472	; (adr r3, 80011b8 <moveRobot+0x300>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fab4 	bl	8000550 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f7ff f8f8 	bl	80001e4 <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fd8a 	bl	8000b14 <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
	v2 = -0.58*x -0.33*y +0.33*w;
 8001004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001006:	f7ff fa4b 	bl	80004a0 <__aeabi_f2d>
 800100a:	a37a      	add	r3, pc, #488	; (adr r3, 80011f4 <moveRobot+0x33c>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fa9e 	bl	8000550 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4614      	mov	r4, r2
 800101a:	461d      	mov	r5, r3
 800101c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800101e:	f7ff fa3f 	bl	80004a0 <__aeabi_f2d>
 8001022:	a365      	add	r3, pc, #404	; (adr r3, 80011b8 <moveRobot+0x300>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fa92 	bl	8000550 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff f8d4 	bl	80001e0 <__aeabi_dsub>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4614      	mov	r4, r2
 800103e:	461d      	mov	r5, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fa1b 	bl	800047c <__aeabi_i2d>
 8001046:	a35c      	add	r3, pc, #368	; (adr r3, 80011b8 <moveRobot+0x300>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fa80 	bl	8000550 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff f8c4 	bl	80001e4 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd56 	bl	8000b14 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	623b      	str	r3, [r7, #32]
	v3 = 0*x +0.67*y +0.33*w;
 800106c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001070:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80011c8 <moveRobot+0x310>
 8001074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001078:	ee17 0a90 	vmov	r0, s15
 800107c:	f7ff fa10 	bl	80004a0 <__aeabi_f2d>
 8001080:	4604      	mov	r4, r0
 8001082:	460d      	mov	r5, r1
 8001084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001086:	f7ff fa0b 	bl	80004a0 <__aeabi_f2d>
 800108a:	a349      	add	r3, pc, #292	; (adr r3, 80011b0 <moveRobot+0x2f8>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fa5e 	bl	8000550 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff f8a2 	bl	80001e4 <__adddf3>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4614      	mov	r4, r2
 80010a6:	461d      	mov	r5, r3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff f9e7 	bl	800047c <__aeabi_i2d>
 80010ae:	a342      	add	r3, pc, #264	; (adr r3, 80011b8 <moveRobot+0x300>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fa4c 	bl	8000550 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff f890 	bl	80001e4 <__adddf3>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd22 	bl	8000b14 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	61fb      	str	r3, [r7, #28]

	//Transform vel in m/s to rad/s w = v/radius
	v1 = v1 / WHEELRADIUS;
 80010d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80011cc <moveRobot+0x314>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v2 = v2 / WHEELRADIUS;
 80010e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80010e8:	eddf 6a38 	vldr	s13, [pc, #224]	; 80011cc <moveRobot+0x314>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	edc7 7a08 	vstr	s15, [r7, #32]
	v3 = v3 / WHEELRADIUS;
 80010f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f8:	eddf 6a34 	vldr	s13, [pc, #208]	; 80011cc <moveRobot+0x314>
 80010fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001100:	edc7 7a07 	vstr	s15, [r7, #28]
	 * pi rad --- 180 grades
	 * 1 min --- 60 sec
	 *
	 * vel [rad/s] * 180/pi * 60/1
	 */
	w1 = v1 * 30/M_PI;
 8001104:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001108:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	ee17 0a90 	vmov	r0, s15
 8001114:	f7ff f9c4 	bl	80004a0 <__aeabi_f2d>
 8001118:	a329      	add	r3, pc, #164	; (adr r3, 80011c0 <moveRobot+0x308>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fb41 	bl	80007a4 <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fcab 	bl	8000a84 <__aeabi_d2iz>
 800112e:	4603      	mov	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
	w2 = v2 * 30/M_PI;
 8001132:	edd7 7a08 	vldr	s15, [r7, #32]
 8001136:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	f7ff f9ad 	bl	80004a0 <__aeabi_f2d>
 8001146:	a31e      	add	r3, pc, #120	; (adr r3, 80011c0 <moveRobot+0x308>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fb2a 	bl	80007a4 <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fc94 	bl	8000a84 <__aeabi_d2iz>
 800115c:	4603      	mov	r3, r0
 800115e:	617b      	str	r3, [r7, #20]
	w3 = v3 * 30/M_PI;
 8001160:	edd7 7a07 	vldr	s15, [r7, #28]
 8001164:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ee17 0a90 	vmov	r0, s15
 8001170:	f7ff f996 	bl	80004a0 <__aeabi_f2d>
 8001174:	a312      	add	r3, pc, #72	; (adr r3, 80011c0 <moveRobot+0x308>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fb13 	bl	80007a4 <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc7d 	bl	8000a84 <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	613b      	str	r3, [r7, #16]


	velMotor(&motorUno, w1);
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <moveRobot+0x318>)
 8001192:	f000 fe03 	bl	8001d9c <velMotor>
	velMotor(&motorDos, w2);
 8001196:	6979      	ldr	r1, [r7, #20]
 8001198:	480e      	ldr	r0, [pc, #56]	; (80011d4 <moveRobot+0x31c>)
 800119a:	f000 fdff 	bl	8001d9c <velMotor>
	velMotor(&motorTres, w3);
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <moveRobot+0x320>)
 80011a2:	f000 fdfb 	bl	8001d9c <velMotor>
}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	d70a3d71 	.word	0xd70a3d71
 80011b4:	3fe570a3 	.word	0x3fe570a3
 80011b8:	51eb851f 	.word	0x51eb851f
 80011bc:	3fd51eb8 	.word	0x3fd51eb8
 80011c0:	54442d18 	.word	0x54442d18
 80011c4:	400921fb 	.word	0x400921fb
 80011c8:	00000000 	.word	0x00000000
 80011cc:	3ced9168 	.word	0x3ced9168
 80011d0:	200000bc 	.word	0x200000bc
 80011d4:	200000d8 	.word	0x200000d8
 80011d8:	200000f4 	.word	0x200000f4
 80011dc:	9999999a 	.word	0x9999999a
 80011e0:	3fa99999 	.word	0x3fa99999
 80011e4:	9999999a 	.word	0x9999999a
 80011e8:	bfa99999 	.word	0xbfa99999
 80011ec:	28f5c28f 	.word	0x28f5c28f
 80011f0:	3fe28f5c 	.word	0x3fe28f5c
 80011f4:	28f5c28f 	.word	0x28f5c28f
 80011f8:	bfe28f5c 	.word	0xbfe28f5c

080011fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <MX_GPIO_Init+0x124>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a41      	ldr	r2, [pc, #260]	; (8001320 <MX_GPIO_Init+0x124>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <MX_GPIO_Init+0x124>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <MX_GPIO_Init+0x124>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <MX_GPIO_Init+0x124>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <MX_GPIO_Init+0x124>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <MX_GPIO_Init+0x124>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <MX_GPIO_Init+0x124>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <MX_GPIO_Init+0x124>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_GPIO_Init+0x124>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <MX_GPIO_Init+0x124>)
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_GPIO_Init+0x124>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_GPIO_Init+0x124>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a25      	ldr	r2, [pc, #148]	; (8001320 <MX_GPIO_Init+0x124>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_GPIO_Init+0x124>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_GPIO_Init+0x124>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <MX_GPIO_Init+0x124>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_GPIO_Init+0x124>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <MX_GPIO_Init+0x128>)
 80012c0:	f001 f8d8 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENABLE_MOTOR1_Pin|DIR_MOTOR2_Pin|DIR_MOTOR3_Pin|DIR_MOTOR1_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 41e4 	mov.w	r1, #29184	; 0x7200
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <MX_GPIO_Init+0x12c>)
 80012cc:	f001 f8d2 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENABLE_MOTOR3_Pin|ENABLE_MOTOR2_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_GPIO_Init+0x12c>)
 80012d8:	f001 f8cc 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 80012dc:	2330      	movs	r3, #48	; 0x30
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0x128>)
 80012f4:	f000 ff3a 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = ENABLE_MOTOR1_Pin|ENABLE_MOTOR3_Pin|ENABLE_MOTOR2_Pin|DIR_MOTOR2_Pin
 80012f8:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80012fc:	61fb      	str	r3, [r7, #28]
                          |DIR_MOTOR3_Pin|DIR_MOTOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_GPIO_Init+0x12c>)
 8001312:	f000 ff2b 	bl	800216c <HAL_GPIO_Init>

}
 8001316:	bf00      	nop
 8001318:	3730      	adds	r7, #48	; 0x30
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	00000000 	.word	0x00000000

08001330 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001336:	f000 fd9d 	bl	8001e74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800133a:	f000 f8df 	bl	80014fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800133e:	f7ff ff5d 	bl	80011fc <MX_GPIO_Init>
	MX_TIM1_Init();
 8001342:	f000 fa47 	bl	80017d4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001346:	f000 fae5 	bl	8001914 <MX_TIM2_Init>
	MX_TIM3_Init();
 800134a:	f000 fb59 	bl	8001a00 <MX_TIM3_Init>
	MX_SPI2_Init();
 800134e:	f000 f943 	bl	80015d8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	initMotor(&motorUno, MOTOR1TIM, MOTOR1CHANNEL, ENABLE_MOTOR1_Pin,
 8001352:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <main+0x180>)
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2320      	movs	r3, #32
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001364:	2200      	movs	r2, #0
 8001366:	4953      	ldr	r1, [pc, #332]	; (80014b4 <main+0x184>)
 8001368:	4853      	ldr	r0, [pc, #332]	; (80014b8 <main+0x188>)
 800136a:	f000 fcbc 	bl	8001ce6 <initMotor>
	DIR_MOTOR1_Pin, MOTORSTEP, MOTORMAXFREQ);
	initMotor(&motorDos, MOTOR2TIM, MOTOR2CHANNEL, ENABLE_MOTOR2_Pin,
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <main+0x180>)
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2320      	movs	r3, #32
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001380:	2200      	movs	r2, #0
 8001382:	494e      	ldr	r1, [pc, #312]	; (80014bc <main+0x18c>)
 8001384:	484e      	ldr	r0, [pc, #312]	; (80014c0 <main+0x190>)
 8001386:	f000 fcae 	bl	8001ce6 <initMotor>
	DIR_MOTOR2_Pin, MOTORSTEP, MOTORMAXFREQ);
	initMotor(&motorTres, MOTOR3TIM, MOTOR3CHANNEL, ENABLE_MOTOR3_Pin,
 800138a:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <main+0x180>)
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2320      	movs	r3, #32
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	2204      	movs	r2, #4
 800139e:	4949      	ldr	r1, [pc, #292]	; (80014c4 <main+0x194>)
 80013a0:	4849      	ldr	r0, [pc, #292]	; (80014c8 <main+0x198>)
 80013a2:	f000 fca0 	bl	8001ce6 <initMotor>
	DIR_MOTOR3_Pin, MOTORSTEP, MOTORMAXFREQ);

	HAL_Delay(500);
 80013a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013aa:	f000 fdd5 	bl	8001f58 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		ret = HAL_SPI_Receive(&hspi2, spiBuffer, SPIBUFFERSIZE, HAL_MAX_DELAY);
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	220b      	movs	r2, #11
 80013b4:	4945      	ldr	r1, [pc, #276]	; (80014cc <main+0x19c>)
 80013b6:	4846      	ldr	r0, [pc, #280]	; (80014d0 <main+0x1a0>)
 80013b8:	f001 fd23 	bl	8002e02 <HAL_SPI_Receive>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <main+0x1a4>)
 80013c2:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK) {
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <main+0x1a4>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d000      	beq.n	80013ce <main+0x9e>
			while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0x9c>

		/*
		 * 0  1  2  3  4  5  6  7  8  9  10
		 * :  1  1  1  1  1  :  1  :  1  ;
		 * */
		theta0[0] = spiBuffer[1];
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <main+0x19c>)
 80013d0:	785a      	ldrb	r2, [r3, #1]
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <main+0x1a8>)
 80013d4:	701a      	strb	r2, [r3, #0]
		theta0[1] = spiBuffer[2];
 80013d6:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <main+0x19c>)
 80013d8:	789a      	ldrb	r2, [r3, #2]
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <main+0x1a8>)
 80013dc:	705a      	strb	r2, [r3, #1]
		theta0[2] = spiBuffer[3];
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <main+0x19c>)
 80013e0:	78da      	ldrb	r2, [r3, #3]
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <main+0x1a8>)
 80013e4:	709a      	strb	r2, [r3, #2]
		theta0[3] = spiBuffer[4];
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <main+0x19c>)
 80013e8:	791a      	ldrb	r2, [r3, #4]
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <main+0x1a8>)
 80013ec:	70da      	strb	r2, [r3, #3]
		theta0[4] = spiBuffer[5];
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <main+0x19c>)
 80013f0:	795a      	ldrb	r2, [r3, #5]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <main+0x1a8>)
 80013f4:	711a      	strb	r2, [r3, #4]
		vel0[0] = spiBuffer[7];
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <main+0x19c>)
 80013f8:	79da      	ldrb	r2, [r3, #7]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <main+0x1ac>)
 80013fc:	701a      	strb	r2, [r3, #0]
		omega0[0] = spiBuffer[9];
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <main+0x19c>)
 8001400:	7a5a      	ldrb	r2, [r3, #9]
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <main+0x1b0>)
 8001404:	701a      	strb	r2, [r3, #0]

		thetaint = atoi((char*) theta0); //char to int
 8001406:	4834      	ldr	r0, [pc, #208]	; (80014d8 <main+0x1a8>)
 8001408:	f002 ff4c 	bl	80042a4 <atoi>
 800140c:	4603      	mov	r3, r0
 800140e:	4a35      	ldr	r2, [pc, #212]	; (80014e4 <main+0x1b4>)
 8001410:	6013      	str	r3, [r2, #0]
		velint = atoi((char*) vel0); //char to int
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <main+0x1ac>)
 8001414:	f002 ff46 	bl	80042a4 <atoi>
 8001418:	4603      	mov	r3, r0
 800141a:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <main+0x1b8>)
 800141c:	6013      	str	r3, [r2, #0]
		omegaint = atoi((char*) omega0);
 800141e:	4830      	ldr	r0, [pc, #192]	; (80014e0 <main+0x1b0>)
 8001420:	f002 ff40 	bl	80042a4 <atoi>
 8001424:	4603      	mov	r3, r0
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <main+0x1bc>)
 8001428:	6013      	str	r3, [r2, #0]

		theta = thetaint/10000.0;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <main+0x1b4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f824 	bl	800047c <__aeabi_i2d>
 8001434:	a31c      	add	r3, pc, #112	; (adr r3, 80014a8 <main+0x178>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f9b3 	bl	80007a4 <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fb65 	bl	8000b14 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <main+0x1c0>)
 800144e:	6013      	str	r3, [r2, #0]
		vel = velint/10.0;
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <main+0x1b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f811 	bl	800047c <__aeabi_i2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <main+0x1c4>)
 8001460:	f7ff f9a0 	bl	80007a4 <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fb52 	bl	8000b14 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <main+0x1c8>)
 8001474:	6013      	str	r3, [r2, #0]

		if(omegaint == 2){
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <main+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d103      	bne.n	8001486 <main+0x156>
			omegaint = -1;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <main+0x1bc>)
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	601a      	str	r2, [r3, #0]
		}

		moveRobot(vel, theta, omegaint);
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <main+0x1c8>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <main+0x1c0>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <main+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	eef0 0a47 	vmov.f32	s1, s14
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fd0a 	bl	8000eb8 <moveRobot>
		ret = HAL_SPI_Receive(&hspi2, spiBuffer, SPIBUFFERSIZE, HAL_MAX_DELAY);
 80014a4:	e783      	b.n	80013ae <main+0x7e>
 80014a6:	bf00      	nop
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40c38800 	.word	0x40c38800
 80014b0:	000186a0 	.word	0x000186a0
 80014b4:	20000168 	.word	0x20000168
 80014b8:	200000bc 	.word	0x200000bc
 80014bc:	200001f8 	.word	0x200001f8
 80014c0:	200000d8 	.word	0x200000d8
 80014c4:	200001b0 	.word	0x200001b0
 80014c8:	200000f4 	.word	0x200000f4
 80014cc:	2000008c 	.word	0x2000008c
 80014d0:	20000110 	.word	0x20000110
 80014d4:	20000097 	.word	0x20000097
 80014d8:	2000009c 	.word	0x2000009c
 80014dc:	20000098 	.word	0x20000098
 80014e0:	200000a4 	.word	0x200000a4
 80014e4:	200000ac 	.word	0x200000ac
 80014e8:	200000a8 	.word	0x200000a8
 80014ec:	200000b0 	.word	0x200000b0
 80014f0:	200000b8 	.word	0x200000b8
 80014f4:	40240000 	.word	0x40240000
 80014f8:	200000b4 	.word	0x200000b4

080014fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fef8 	bl	8004300 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <SystemClock_Config+0xc8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <SystemClock_Config+0xc8>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <SystemClock_Config+0xc8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <SystemClock_Config+0xcc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <SystemClock_Config+0xcc>)
 8001546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <SystemClock_Config+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2310      	movs	r3, #16
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800156c:	2308      	movs	r3, #8
 800156e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001578:	2304      	movs	r3, #4
 800157a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f000 ff91 	bl	80024a8 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x94>
		Error_Handler();
 800158c:	f000 f81e 	bl	80015cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2103      	movs	r1, #3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 f9f3 	bl	8002998 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xc0>
		Error_Handler();
 80015b8:	f000 f808 	bl	80015cc <Error_Handler>
	}
}
 80015bc:	bf00      	nop
 80015be:	3750      	adds	r7, #80	; 0x50
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000

080015cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_SPI2_Init+0x5c>)
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <MX_SPI2_Init+0x60>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI2_Init+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_SPI2_Init+0x5c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_SPI2_Init+0x5c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI2_Init+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_SPI2_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI2_Init+0x5c>)
 8001602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001606:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_SPI2_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI2_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_SPI2_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI2_Init+0x5c>)
 800161c:	220a      	movs	r2, #10
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_SPI2_Init+0x5c>)
 8001622:	f001 fb65 	bl	8002cf0 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 800162c:	f7ff ffce 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000110 	.word	0x20000110
 8001638:	40003800 	.word	0x40003800

0800163c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_SPI_MspInit+0xc0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d14a      	bne.n	80016f4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a26      	ldr	r2, [pc, #152]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_SPI_MspInit+0xc4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016b2:	230c      	movs	r3, #12
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c2:	2305      	movs	r3, #5
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <HAL_SPI_MspInit+0xc8>)
 80016ce:	f000 fd4d 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e4:	2305      	movs	r3, #5
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <HAL_SPI_MspInit+0xcc>)
 80016f0:	f000 fd3c 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40003800 	.word	0x40003800
 8001700:	40023800 	.word	0x40023800
 8001704:	40020800 	.word	0x40020800
 8001708:	40020400 	.word	0x40020400

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_MspInit+0x4c>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x4c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 fbb6 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	; 0x58
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2220      	movs	r2, #32
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fd77 	bl	8004300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MX_TIM1_Init+0x138>)
 8001814:	4a3e      	ldr	r2, [pc, #248]	; (8001910 <MX_TIM1_Init+0x13c>)
 8001816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <MX_TIM1_Init+0x138>)
 800181a:	220e      	movs	r2, #14
 800181c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <MX_TIM1_Init+0x138>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <MX_TIM1_Init+0x138>)
 8001826:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800182a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <MX_TIM1_Init+0x138>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <MX_TIM1_Init+0x138>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <MX_TIM1_Init+0x138>)
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183e:	4833      	ldr	r0, [pc, #204]	; (800190c <MX_TIM1_Init+0x138>)
 8001840:	f001 fec2 	bl	80035c8 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800184a:	f7ff febf 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001858:	4619      	mov	r1, r3
 800185a:	482c      	ldr	r0, [pc, #176]	; (800190c <MX_TIM1_Init+0x138>)
 800185c:	f002 f8ce 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001866:	f7ff feb1 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800186a:	4828      	ldr	r0, [pc, #160]	; (800190c <MX_TIM1_Init+0x138>)
 800186c:	f001 fefb 	bl	8003666 <HAL_TIM_PWM_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001876:	f7ff fea9 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001886:	4619      	mov	r1, r3
 8001888:	4820      	ldr	r0, [pc, #128]	; (800190c <MX_TIM1_Init+0x138>)
 800188a:	f002 fc4b 	bl	8004124 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001894:	f7ff fe9a 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001898:	2360      	movs	r3, #96	; 0x60
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_TIM1_Init+0x138>)
 80018be:	f001 ffdb 	bl	8003878 <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018c8:	f7ff fe80 	bl	80015cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_TIM1_Init+0x138>)
 80018f0:	f002 fc86 	bl	8004200 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80018fa:	f7ff fe67 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <MX_TIM1_Init+0x138>)
 8001900:	f000 f942 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001904:	bf00      	nop
 8001906:	3758      	adds	r7, #88	; 0x58
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000168 	.word	0x20000168
 8001910:	40010000 	.word	0x40010000

08001914 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <MX_TIM2_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_TIM2_Init+0xe8>)
 800195a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800195e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196c:	4823      	ldr	r0, [pc, #140]	; (80019fc <MX_TIM2_Init+0xe8>)
 800196e:	f001 fe2b 	bl	80035c8 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001978:	f7ff fe28 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	4619      	mov	r1, r3
 8001988:	481c      	ldr	r0, [pc, #112]	; (80019fc <MX_TIM2_Init+0xe8>)
 800198a:	f002 f837 	bl	80039fc <HAL_TIM_ConfigClockSource>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001994:	f7ff fe1a 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <MX_TIM2_Init+0xe8>)
 800199a:	f001 fe64 	bl	8003666 <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019a4:	f7ff fe12 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4619      	mov	r1, r3
 80019b6:	4811      	ldr	r0, [pc, #68]	; (80019fc <MX_TIM2_Init+0xe8>)
 80019b8:	f002 fbb4 	bl	8004124 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019c2:	f7ff fe03 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c6:	2360      	movs	r3, #96	; 0x60
 80019c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2204      	movs	r2, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_TIM2_Init+0xe8>)
 80019e0:	f001 ff4a 	bl	8003878 <HAL_TIM_PWM_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ea:	f7ff fdef 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <MX_TIM2_Init+0xe8>)
 80019f0:	f000 f8ca 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 80019f4:	bf00      	nop
 80019f6:	3738      	adds	r7, #56	; 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200001b0 	.word	0x200001b0

08001a00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]
 8001a2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a32:	4a2e      	ldr	r2, [pc, #184]	; (8001aec <MX_TIM3_Init+0xec>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14;
 8001a36:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a38:	220e      	movs	r2, #14
 8001a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a56:	4824      	ldr	r0, [pc, #144]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a58:	f001 fdb6 	bl	80035c8 <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a62:	f7ff fdb3 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481d      	ldr	r0, [pc, #116]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a74:	f001 ffc2 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a7e:	f7ff fda5 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a82:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a84:	f001 fdef 	bl	8003666 <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a8e:	f7ff fd9d 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001aa2:	f002 fb3f 	bl	8004124 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001aac:	f7ff fd8e 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001aca:	f001 fed5 	bl	8003878 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ad4:	f7ff fd7a 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001ada:	f000 f855 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3738      	adds	r7, #56	; 0x38
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001f8 	.word	0x200001f8
 8001aec:	40000400 	.word	0x40000400

08001af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_TIM_Base_MspInit+0x8c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10e      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b1e:	e026      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
}
 8001b46:	e012      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_TIM_Base_MspInit+0x94>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10d      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_TIM_Base_MspInit+0x90>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
}
 8001b6e:	bf00      	nop
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40000400 	.word	0x40000400

08001b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a36      	ldr	r2, [pc, #216]	; (8001c80 <HAL_TIM_MspPostInit+0xf8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11f      	bne.n	8001bea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a34      	ldr	r2, [pc, #208]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001bb4:	f043 0310 	orr.w	r3, r3, #16
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4829      	ldr	r0, [pc, #164]	; (8001c88 <HAL_TIM_MspPostInit+0x100>)
 8001be4:	f000 fac2 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be8:	e046      	b.n	8001c78 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf2:	d11e      	bne.n	8001c32 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6313      	str	r3, [r2, #48]	; 0x30
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c10:	2302      	movs	r3, #2
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c20:	2301      	movs	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <HAL_TIM_MspPostInit+0x104>)
 8001c2c:	f000 fa9e 	bl	800216c <HAL_GPIO_Init>
}
 8001c30:	e022      	b.n	8001c78 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_TIM_MspPostInit+0x108>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d11d      	bne.n	8001c78 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c58:	2340      	movs	r3, #64	; 0x40
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <HAL_TIM_MspPostInit+0x104>)
 8001c74:	f000 fa7a 	bl	800216c <HAL_GPIO_Init>
}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40000400 	.word	0x40000400

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb0:	4c0b      	ldr	r4, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cbe:	f7ff fd77 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f002 faf9 	bl	80042b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7ff fb33 	bl	8001330 <main>
  bx  lr    
 8001cca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001cd8:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 8001cdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ce0:	20000244 	.word	0x20000244

08001ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC_IRQHandler>

08001ce6 <initMotor>:

#include "motor.h"

void initMotor(MOTOR_HandleTypeDef *motor, TIM_HandleTypeDef *tim,
		uint32_t channel, uint16_t enablePin, uint16_t dirPin, uint32_t step,
		uint32_t maxFreq) {
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	807b      	strh	r3, [r7, #2]

	motor->Motor = tim;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	601a      	str	r2, [r3, #0]
	motor->Channel = channel;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]
	motor->enablePin = enablePin;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	811a      	strh	r2, [r3, #8]
	motor->dirPin = dirPin;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8b3a      	ldrh	r2, [r7, #24]
 8001d0a:	815a      	strh	r2, [r3, #10]
	motor->Step = step;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	60da      	str	r2, [r3, #12]
	motor->MaxFreq = maxFreq;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	611a      	str	r2, [r3, #16]

	endisMotor(motor, DISABLE_MOTOR);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f810 	bl	8001d40 <endisMotor>
	changeDirMotor(motor, CW);
 8001d20:	2101      	movs	r1, #1
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f824 	bl	8001d70 <changeDirMotor>
	HAL_TIM_PWM_Start(motor->Motor, motor->Channel); //Init PWM signal
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f001 fcf0 	bl	8003718 <HAL_TIM_PWM_Start>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <endisMotor>:

void endisMotor(MOTOR_HandleTypeDef *motor, enable_Motor State) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
	motor->State = State;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(GPIOD, motor->enablePin, motor->State);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	8919      	ldrh	r1, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7e5b      	ldrb	r3, [r3, #25]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <endisMotor+0x2c>)
 8001d5e:	f000 fb89 	bl	8002474 <HAL_GPIO_WritePin>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40020c00 	.word	0x40020c00

08001d70 <changeDirMotor>:

void changeDirMotor(MOTOR_HandleTypeDef *motor, dir_Motor dir) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
	motor->dir = dir;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	761a      	strb	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOD, motor->dirPin, dir);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	895b      	ldrh	r3, [r3, #10]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <changeDirMotor+0x28>)
 8001d8c:	f000 fb72 	bl	8002474 <HAL_GPIO_WritePin>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40020c00 	.word	0x40020c00

08001d9c <velMotor>:

void velMotor(MOTOR_HandleTypeDef *motor, int32_t vel) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	uint32_t ARRreg, fstep;

	if (vel < 0) {
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da07      	bge.n	8001dbc <velMotor+0x20>
		vel = vel * (-1);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	425b      	negs	r3, r3
 8001db0:	603b      	str	r3, [r7, #0]
		changeDirMotor(motor, CCW);
 8001db2:	2100      	movs	r1, #0
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffdb 	bl	8001d70 <changeDirMotor>
 8001dba:	e003      	b.n	8001dc4 <velMotor+0x28>
	} else {
		changeDirMotor(motor, CW);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffd6 	bl	8001d70 <changeDirMotor>
	}

	motor->desiredVel = vel;
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	615a      	str	r2, [r3, #20]

	if (vel != 0) {
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d044      	beq.n	8001e5a <velMotor+0xbe>
		fstep = (vel * 360 * motor->Step) / (60 * 1.8);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb3a 	bl	800045c <__aeabi_ui2d>
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <velMotor+0xd0>)
 8001dee:	f7fe fcd9 	bl	80007a4 <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fe6b 	bl	8000ad4 <__aeabi_d2uiz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	60fb      	str	r3, [r7, #12]
		if (fstep > motor->MaxFreq)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d902      	bls.n	8001e12 <velMotor+0x76>
			fstep = motor->MaxFreq;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	60fb      	str	r3, [r7, #12]

		//min fstep = 106 Hz --> 1 rpm
		ARRreg = (CLOCKFREQ / (fstep * (motor->Motor->Instance->PSC + 1))) - 1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <velMotor+0xd4>)
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
		motor->Motor->Instance->ARR = ARRreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
		motor->Motor->Instance->CCR1 = (motor->Motor->Instance->ARR) / 2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34
		if (motor->State == DISABLE_MOTOR)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e5b      	ldrb	r3, [r3, #25]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <velMotor+0xc6>
			endisMotor(motor, ENABLE_MOTOR);
 8001e50:	2100      	movs	r1, #0
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff74 	bl	8001d40 <endisMotor>
	} else{
		endisMotor(motor, DISABLE_MOTOR);
	}
}
 8001e58:	e003      	b.n	8001e62 <velMotor+0xc6>
		endisMotor(motor, DISABLE_MOTOR);
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff6f 	bl	8001d40 <endisMotor>
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	405b0000 	.word	0x405b0000
 8001e70:	05f5e100 	.word	0x05f5e100

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f931 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fc30 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f93b 	bl	8002152 <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f000 f911 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000240 	.word	0x20000240

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000240 	.word	0x20000240

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff47 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff5c 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb0 	bl	80020c0 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e159      	b.n	800243c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8148 	bne.w	8002436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a2 	beq.w	8002436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a52      	ldr	r2, [pc, #328]	; (8002458 <HAL_GPIO_Init+0x2ec>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a49      	ldr	r2, [pc, #292]	; (800245c <HAL_GPIO_Init+0x2f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x202>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_GPIO_Init+0x2f4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x1fe>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_GPIO_Init+0x2f8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1fa>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a46      	ldr	r2, [pc, #280]	; (8002468 <HAL_GPIO_Init+0x2fc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1f6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_GPIO_Init+0x300>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1f2>
 800235a:	2304      	movs	r3, #4
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800235e:	2307      	movs	r3, #7
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_GPIO_Init+0x2ec>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x304>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002430:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f aea2 	bls.w	8002188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e267      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e242      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a75      	ldr	r2, [pc, #468]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b70      	ldr	r3, [pc, #448]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6f      	ldr	r2, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6c      	ldr	r2, [pc, #432]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b69      	ldr	r3, [pc, #420]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a68      	ldr	r2, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fcee 	bl	8001f40 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fcea 	bl	8001f40 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e207      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fcda 	bl	8001f40 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fcd6 	bl	8001f40 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1f3      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c7      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4937      	ldr	r1, [pc, #220]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x244>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff fc8f 	bl	8001f40 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fc8b 	bl	8001f40 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a8      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4925      	ldr	r1, [pc, #148]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x244>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff fc6e 	bl	8001f40 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7ff fc6a 	bl	8001f40 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e187      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d036      	beq.n	8002700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_RCC_OscConfig+0x248>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7ff fc4e 	bl	8001f40 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff fc4a 	bl	8001f40 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e167      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e01b      	b.n	8002700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_OscConfig+0x248>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7ff fc37 	bl	8001f40 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e00e      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7ff fc33 	bl	8001f40 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d907      	bls.n	80026f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e150      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470000 	.word	0x42470000
 80026f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ea      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8097 	beq.w	800283c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b7d      	ldr	r3, [pc, #500]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a7c      	ldr	r2, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b7a      	ldr	r3, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b77      	ldr	r3, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b74      	ldr	r3, [pc, #464]	; (800291c <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7ff fbf3 	bl	8001f40 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7ff fbef 	bl	8001f40 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e10c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ea>
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x30c>
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a5b      	ldr	r2, [pc, #364]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 80027b4:	4b58      	ldr	r3, [pc, #352]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	4b55      	ldr	r3, [pc, #340]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff fbb4 	bl	8001f40 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7ff fbb0 	bl	8001f40 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0cb      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7ff fb9e 	bl	8001f40 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7ff fb9a 	bl	8001f40 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b5      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b39      	ldr	r3, [pc, #228]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4a38      	ldr	r2, [pc, #224]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a1 	beq.w	8002988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d05c      	beq.n	800290c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d141      	bne.n	80028de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fb6e 	bl	8001f40 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7ff fb6a 	bl	8001f40 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e087      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	491b      	ldr	r1, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7ff fb43 	bl	8001f40 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028be:	f7ff fb3f 	bl	8001f40 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e05c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x416>
 80028dc:	e054      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fb2c 	bl	8001f40 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7ff fb28 	bl	8001f40 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
 800290a:	e03d      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e038      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000
 8002920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4ec>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d028      	beq.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d121      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800295a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0cc      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90c      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d044      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4934      	ldr	r1, [pc, #208]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7ff fa5a 	bl	8001f40 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7ff fa56 	bl	8001f40 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f9ba 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	08005580 	.word	0x08005580
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b090      	sub	sp, #64	; 0x40
 8002b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80a1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b9c:	e09b      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ba2:	e098      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	fb03 f201 	mul.w	r2, r3, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a43      	ldr	r2, [pc, #268]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bde:	fba0 1202 	umull	r1, r2, r0, r2
 8002be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be4:	460a      	mov	r2, r1
 8002be6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	4413      	add	r3, r2
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bfe:	f7fd ffd9 	bl	8000bb4 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0a:	e053      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	617a      	str	r2, [r7, #20]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c1e:	f04f 0b00 	mov.w	fp, #0
 8002c22:	4652      	mov	r2, sl
 8002c24:	465b      	mov	r3, fp
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c56:	ebb2 0408 	subs.w	r4, r2, r8
 8002c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	00eb      	lsls	r3, r5, #3
 8002c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6c:	00e2      	lsls	r2, r4, #3
 8002c6e:	4614      	mov	r4, r2
 8002c70:	461d      	mov	r5, r3
 8002c72:	eb14 030a 	adds.w	r3, r4, sl
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	eb45 030b 	adc.w	r3, r5, fp
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca8:	f7fd ff84 	bl	8000bb4 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3740      	adds	r7, #64	; 0x40
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07b      	b.n	8002dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d108      	bne.n	8002d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d12:	d009      	beq.n	8002d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
 8002d1a:	e005      	b.n	8002d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe fc7a 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	f003 0104 	and.w	r1, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0210 	and.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b088      	sub	sp, #32
 8002e06:	af02      	add	r7, sp, #8
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d112      	bne.n	8002e46 <HAL_SPI_Receive+0x44>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10e      	bne.n	8002e46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f8f1 	bl	8003024 <HAL_SPI_TransmitReceive>
 8002e42:	4603      	mov	r3, r0
 8002e44:	e0ea      	b.n	800301c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_SPI_Receive+0x52>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e0e3      	b.n	800301c <HAL_SPI_Receive+0x21a>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e5c:	f7ff f870 	bl	8001f40 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e72:	e0ca      	b.n	800300a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_Receive+0x7e>
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e84:	e0c1      	b.n	800300a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	d10f      	bne.n	8002eee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002edc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d007      	beq.n	8002f0c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d162      	bne.n	8002fda <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f14:	e02e      	b.n	8002f74 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d115      	bne.n	8002f50 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f103 020c 	add.w	r2, r3, #12
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f4e:	e011      	b.n	8002f74 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f50:	f7fe fff6 	bl	8001f40 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d803      	bhi.n	8002f68 <HAL_SPI_Receive+0x166>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d102      	bne.n	8002f6e <HAL_SPI_Receive+0x16c>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f72:	e04a      	b.n	800300a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1cb      	bne.n	8002f16 <HAL_SPI_Receive+0x114>
 8002f7e:	e031      	b.n	8002fe4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d113      	bne.n	8002fb6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb4:	e011      	b.n	8002fda <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb6:	f7fe ffc3 	bl	8001f40 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d803      	bhi.n	8002fce <HAL_SPI_Receive+0x1cc>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Receive+0x1d2>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fd8:	e017      	b.n	800300a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1cd      	bne.n	8002f80 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fa45 	bl	8003478 <SPI_EndRxTransaction>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
 8003006:	e000      	b.n	800300a <HAL_SPI_Receive+0x208>
  }

error :
 8003008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_SPI_TransmitReceive+0x26>
 8003046:	2302      	movs	r3, #2
 8003048:	e18a      	b.n	8003360 <HAL_SPI_TransmitReceive+0x33c>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003052:	f7fe ff75 	bl	8001f40 <HAL_GetTick>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800306c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003070:	2b01      	cmp	r3, #1
 8003072:	d00f      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x70>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307a:	d107      	bne.n	800308c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <HAL_SPI_TransmitReceive+0x68>
 8003084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003088:	2b04      	cmp	r3, #4
 800308a:	d003      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800308c:	2302      	movs	r3, #2
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003092:	e15b      	b.n	800334c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0x82>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0x82>
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ac:	e14e      	b.n	800334c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d003      	beq.n	80030c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2205      	movs	r2, #5
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	887a      	ldrh	r2, [r7, #2]
 80030d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	887a      	ldrh	r2, [r7, #2]
 80030ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d007      	beq.n	8003116 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311e:	d178      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_SPI_TransmitReceive+0x10a>
 8003128:	8b7b      	ldrh	r3, [r7, #26]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d166      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003152:	e053      	b.n	80031fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d11b      	bne.n	800319a <HAL_SPI_TransmitReceive+0x176>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <HAL_SPI_TransmitReceive+0x176>
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d113      	bne.n	800319a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d119      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x1b8>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031dc:	f7fe feb0 	bl	8001f40 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d807      	bhi.n	80031fc <HAL_SPI_TransmitReceive+0x1d8>
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d003      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031fa:	e0a7      	b.n	800334c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1a6      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x130>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1a1      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x130>
 8003210:	e07c      	b.n	800330c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x1fc>
 800321a:	8b7b      	ldrh	r3, [r7, #26]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d16b      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003246:	e057      	b.n	80032f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d11c      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x26c>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d017      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x26c>
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d114      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d119      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x2ae>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d014      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ce:	2301      	movs	r3, #1
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032d2:	f7fe fe35 	bl	8001f40 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032de:	429a      	cmp	r2, r3
 80032e0:	d803      	bhi.n	80032ea <HAL_SPI_TransmitReceive+0x2c6>
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x2cc>
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032f6:	e029      	b.n	800334c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1a2      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x224>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d19d      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f917 	bl	8003544 <SPI_EndRxTxTransaction>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003328:	e010      	b.n	800334c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	e000      	b.n	800334c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800334a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800335c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003360:	4618      	mov	r0, r3
 8003362:	3730      	adds	r7, #48	; 0x30
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003378:	f7fe fde2 	bl	8001f40 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4413      	add	r3, r2
 8003386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003388:	f7fe fdda 	bl	8001f40 <HAL_GetTick>
 800338c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	0d1b      	lsrs	r3, r3, #20
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339e:	e054      	b.n	800344a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d050      	beq.n	800344a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a8:	f7fe fdca 	bl	8001f40 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d902      	bls.n	80033be <SPI_WaitFlagStateUntilTimeout+0x56>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d13d      	bne.n	800343a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d6:	d111      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e0:	d004      	beq.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ea:	d107      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003404:	d10f      	bne.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e017      	b.n	800346a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3b01      	subs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d19b      	bne.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000000 	.word	0x20000000

08003478 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348c:	d111      	bne.n	80034b2 <SPI_EndRxTransaction+0x3a>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d004      	beq.n	80034a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d107      	bne.n	80034b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d12a      	bne.n	8003512 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d012      	beq.n	80034ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7ff ff49 	bl	8003368 <SPI_WaitFlagStateUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02d      	beq.n	8003538 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e026      	b.n	800353a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	2101      	movs	r1, #1
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff ff36 	bl	8003368 <SPI_WaitFlagStateUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01a      	beq.n	8003538 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f043 0220 	orr.w	r2, r3, #32
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e013      	b.n	800353a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	2101      	movs	r1, #1
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff ff23 	bl	8003368 <SPI_WaitFlagStateUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e000      	b.n	800353a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <SPI_EndRxTxTransaction+0x7c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <SPI_EndRxTxTransaction+0x80>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0d5b      	lsrs	r3, r3, #21
 800355c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356e:	d112      	bne.n	8003596 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2200      	movs	r2, #0
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff fef4 	bl	8003368 <SPI_WaitFlagStateUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e00f      	b.n	80035b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3b01      	subs	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d0f2      	beq.n	8003596 <SPI_EndRxTxTransaction+0x52>
 80035b0:	e000      	b.n	80035b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035b2:	bf00      	nop
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000
 80035c4:	165e9f81 	.word	0x165e9f81

080035c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e041      	b.n	800365e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe fa7e 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 fac0 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e041      	b.n	80036fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f839 	bl	8003704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f000 fa71 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_TIM_PWM_Start+0x24>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e022      	b.n	8003782 <HAL_TIM_PWM_Start+0x6a>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d109      	bne.n	8003756 <HAL_TIM_PWM_Start+0x3e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e015      	b.n	8003782 <HAL_TIM_PWM_Start+0x6a>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d109      	bne.n	8003770 <HAL_TIM_PWM_Start+0x58>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e008      	b.n	8003782 <HAL_TIM_PWM_Start+0x6a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e068      	b.n	800385c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_TIM_PWM_Start+0x82>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	e013      	b.n	80037c2 <HAL_TIM_PWM_Start+0xaa>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d104      	bne.n	80037aa <HAL_TIM_PWM_Start+0x92>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a8:	e00b      	b.n	80037c2 <HAL_TIM_PWM_Start+0xaa>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_PWM_Start+0xa2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b8:	e003      	b.n	80037c2 <HAL_TIM_PWM_Start+0xaa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2201      	movs	r2, #1
 80037c8:	6839      	ldr	r1, [r7, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fc84 	bl	80040d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_TIM_PWM_Start+0x14c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d107      	bne.n	80037ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_TIM_PWM_Start+0x14c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_TIM_PWM_Start+0x10e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d013      	beq.n	8003826 <HAL_TIM_PWM_Start+0x10e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_TIM_PWM_Start+0x150>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIM_PWM_Start+0x10e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a17      	ldr	r2, [pc, #92]	; (800386c <HAL_TIM_PWM_Start+0x154>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_TIM_PWM_Start+0x10e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_TIM_PWM_Start+0x158>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIM_PWM_Start+0x10e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_TIM_PWM_Start+0x15c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d111      	bne.n	800384a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b06      	cmp	r3, #6
 8003836:	d010      	beq.n	800385a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003848:	e007      	b.n	800385a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40014000 	.word	0x40014000

08003878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003892:	2302      	movs	r3, #2
 8003894:	e0ae      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	f200 809f 	bhi.w	80039e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	080039e5 	.word	0x080039e5
 80038b4:	080039e5 	.word	0x080039e5
 80038b8:	080039e5 	.word	0x080039e5
 80038bc:	08003921 	.word	0x08003921
 80038c0:	080039e5 	.word	0x080039e5
 80038c4:	080039e5 	.word	0x080039e5
 80038c8:	080039e5 	.word	0x080039e5
 80038cc:	08003963 	.word	0x08003963
 80038d0:	080039e5 	.word	0x080039e5
 80038d4:	080039e5 	.word	0x080039e5
 80038d8:	080039e5 	.word	0x080039e5
 80038dc:	080039a3 	.word	0x080039a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f9d0 	bl	8003c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0208 	orr.w	r2, r2, #8
 80038fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6999      	ldr	r1, [r3, #24]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	619a      	str	r2, [r3, #24]
      break;
 800391e:	e064      	b.n	80039ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fa16 	bl	8003d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6999      	ldr	r1, [r3, #24]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	021a      	lsls	r2, r3, #8
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	619a      	str	r2, [r3, #24]
      break;
 8003960:	e043      	b.n	80039ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fa61 	bl	8003e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0208 	orr.w	r2, r2, #8
 800397c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0204 	bic.w	r2, r2, #4
 800398c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69d9      	ldr	r1, [r3, #28]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	61da      	str	r2, [r3, #28]
      break;
 80039a0:	e023      	b.n	80039ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 faab 	bl	8003f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69d9      	ldr	r1, [r3, #28]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	61da      	str	r2, [r3, #28]
      break;
 80039e2:	e002      	b.n	80039ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
      break;
 80039e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x1c>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0b4      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x186>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a50:	d03e      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	f200 8087 	bhi.w	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	f000 8086 	beq.w	8003b6e <HAL_TIM_ConfigClockSource+0x172>
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	d87f      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d01a      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d87b      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d050      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x11a>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d877      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b50      	cmp	r3, #80	; 0x50
 8003a7a:	d03c      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d873      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d058      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x13a>
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d86f      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a88:	2b30      	cmp	r3, #48	; 0x30
 8003a8a:	d064      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003a8c:	2b30      	cmp	r3, #48	; 0x30
 8003a8e:	d86b      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d060      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d867      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d05c      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d05a      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa0:	e062      	b.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6899      	ldr	r1, [r3, #8]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f000 faf1 	bl	8004098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	609a      	str	r2, [r3, #8]
      break;
 8003ace:	e04f      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f000 fada 	bl	8004098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af2:	609a      	str	r2, [r3, #8]
      break;
 8003af4:	e03c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f000 fa4e 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2150      	movs	r1, #80	; 0x50
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 faa7 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b14:	e02c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 fa6d 	bl	8004002 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2160      	movs	r1, #96	; 0x60
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa97 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b34:	e01c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 fa2e 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fa87 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b54:	e00c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f000 fa7e 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b66:	e003      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e000      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a34      	ldr	r2, [pc, #208]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00f      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003baa:	d00b      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <TIM_Base_SetConfig+0xe8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <TIM_Base_SetConfig+0xec>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <TIM_Base_SetConfig+0xf0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d108      	bne.n	8003bd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01b      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d017      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <TIM_Base_SetConfig+0xe8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM_Base_SetConfig+0xec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00f      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <TIM_Base_SetConfig+0xf0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <TIM_Base_SetConfig+0xf4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <TIM_Base_SetConfig+0xf8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <TIM_Base_SetConfig+0xfc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d103      	bne.n	8003c5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	615a      	str	r2, [r3, #20]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800
 8003c7c:	40000c00 	.word	0x40000c00
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800

08003c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0302 	bic.w	r3, r3, #2
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <TIM_OC1_SetConfig+0xc8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <TIM_OC1_SetConfig+0xc8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d111      	bne.n	8003d2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010000 	.word	0x40010000

08003d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f023 0210 	bic.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <TIM_OC2_SetConfig+0xd4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10d      	bne.n	8003dd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <TIM_OC2_SetConfig+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d113      	bne.n	8003e04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000

08003e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <TIM_OC3_SetConfig+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10d      	bne.n	8003eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <TIM_OC3_SetConfig+0xd0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d113      	bne.n	8003eda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40010000 	.word	0x40010000

08003f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_OC4_SetConfig+0x9c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d109      	bne.n	8003f78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000

08003fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 030a 	bic.w	r3, r3, #10
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004002:	b480      	push	{r7}
 8004004:	b087      	sub	sp, #28
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f023 0210 	bic.w	r2, r3, #16
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	031b      	lsls	r3, r3, #12
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800403e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	f043 0307 	orr.w	r3, r3, #7
 8004084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2201      	movs	r2, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1a      	ldr	r2, [r3, #32]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004138:	2302      	movs	r3, #2
 800413a:	e050      	b.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d018      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d013      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10c      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40014000 	.word	0x40014000

08004200 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e03d      	b.n	8004298 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <atoi>:
 80042a4:	220a      	movs	r2, #10
 80042a6:	2100      	movs	r1, #0
 80042a8:	f000 b8b4 	b.w	8004414 <strtol>

080042ac <__errno>:
 80042ac:	4b01      	ldr	r3, [pc, #4]	; (80042b4 <__errno+0x8>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4d0d      	ldr	r5, [pc, #52]	; (80042f0 <__libc_init_array+0x38>)
 80042bc:	4c0d      	ldr	r4, [pc, #52]	; (80042f4 <__libc_init_array+0x3c>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	2600      	movs	r6, #0
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	4d0b      	ldr	r5, [pc, #44]	; (80042f8 <__libc_init_array+0x40>)
 80042ca:	4c0c      	ldr	r4, [pc, #48]	; (80042fc <__libc_init_array+0x44>)
 80042cc:	f001 f94a 	bl	8005564 <_init>
 80042d0:	1b64      	subs	r4, r4, r5
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	2600      	movs	r6, #0
 80042d6:	42a6      	cmp	r6, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e0:	4798      	blx	r3
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ea:	4798      	blx	r3
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	08005878 	.word	0x08005878
 80042f4:	08005878 	.word	0x08005878
 80042f8:	08005878 	.word	0x08005878
 80042fc:	0800587c 	.word	0x0800587c

08004300 <memset>:
 8004300:	4402      	add	r2, r0
 8004302:	4603      	mov	r3, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <_strtol_l.constprop.0>:
 8004310:	2b01      	cmp	r3, #1
 8004312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004316:	d001      	beq.n	800431c <_strtol_l.constprop.0+0xc>
 8004318:	2b24      	cmp	r3, #36	; 0x24
 800431a:	d906      	bls.n	800432a <_strtol_l.constprop.0+0x1a>
 800431c:	f7ff ffc6 	bl	80042ac <__errno>
 8004320:	2316      	movs	r3, #22
 8004322:	6003      	str	r3, [r0, #0]
 8004324:	2000      	movs	r0, #0
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004410 <_strtol_l.constprop.0+0x100>
 800432e:	460d      	mov	r5, r1
 8004330:	462e      	mov	r6, r5
 8004332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004336:	f814 700c 	ldrb.w	r7, [r4, ip]
 800433a:	f017 0708 	ands.w	r7, r7, #8
 800433e:	d1f7      	bne.n	8004330 <_strtol_l.constprop.0+0x20>
 8004340:	2c2d      	cmp	r4, #45	; 0x2d
 8004342:	d132      	bne.n	80043aa <_strtol_l.constprop.0+0x9a>
 8004344:	782c      	ldrb	r4, [r5, #0]
 8004346:	2701      	movs	r7, #1
 8004348:	1cb5      	adds	r5, r6, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d05b      	beq.n	8004406 <_strtol_l.constprop.0+0xf6>
 800434e:	2b10      	cmp	r3, #16
 8004350:	d109      	bne.n	8004366 <_strtol_l.constprop.0+0x56>
 8004352:	2c30      	cmp	r4, #48	; 0x30
 8004354:	d107      	bne.n	8004366 <_strtol_l.constprop.0+0x56>
 8004356:	782c      	ldrb	r4, [r5, #0]
 8004358:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800435c:	2c58      	cmp	r4, #88	; 0x58
 800435e:	d14d      	bne.n	80043fc <_strtol_l.constprop.0+0xec>
 8004360:	786c      	ldrb	r4, [r5, #1]
 8004362:	2310      	movs	r3, #16
 8004364:	3502      	adds	r5, #2
 8004366:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800436a:	f108 38ff 	add.w	r8, r8, #4294967295
 800436e:	f04f 0c00 	mov.w	ip, #0
 8004372:	fbb8 f9f3 	udiv	r9, r8, r3
 8004376:	4666      	mov	r6, ip
 8004378:	fb03 8a19 	mls	sl, r3, r9, r8
 800437c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004380:	f1be 0f09 	cmp.w	lr, #9
 8004384:	d816      	bhi.n	80043b4 <_strtol_l.constprop.0+0xa4>
 8004386:	4674      	mov	r4, lr
 8004388:	42a3      	cmp	r3, r4
 800438a:	dd24      	ble.n	80043d6 <_strtol_l.constprop.0+0xc6>
 800438c:	f1bc 0f00 	cmp.w	ip, #0
 8004390:	db1e      	blt.n	80043d0 <_strtol_l.constprop.0+0xc0>
 8004392:	45b1      	cmp	r9, r6
 8004394:	d31c      	bcc.n	80043d0 <_strtol_l.constprop.0+0xc0>
 8004396:	d101      	bne.n	800439c <_strtol_l.constprop.0+0x8c>
 8004398:	45a2      	cmp	sl, r4
 800439a:	db19      	blt.n	80043d0 <_strtol_l.constprop.0+0xc0>
 800439c:	fb06 4603 	mla	r6, r6, r3, r4
 80043a0:	f04f 0c01 	mov.w	ip, #1
 80043a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043a8:	e7e8      	b.n	800437c <_strtol_l.constprop.0+0x6c>
 80043aa:	2c2b      	cmp	r4, #43	; 0x2b
 80043ac:	bf04      	itt	eq
 80043ae:	782c      	ldrbeq	r4, [r5, #0]
 80043b0:	1cb5      	addeq	r5, r6, #2
 80043b2:	e7ca      	b.n	800434a <_strtol_l.constprop.0+0x3a>
 80043b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80043b8:	f1be 0f19 	cmp.w	lr, #25
 80043bc:	d801      	bhi.n	80043c2 <_strtol_l.constprop.0+0xb2>
 80043be:	3c37      	subs	r4, #55	; 0x37
 80043c0:	e7e2      	b.n	8004388 <_strtol_l.constprop.0+0x78>
 80043c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80043c6:	f1be 0f19 	cmp.w	lr, #25
 80043ca:	d804      	bhi.n	80043d6 <_strtol_l.constprop.0+0xc6>
 80043cc:	3c57      	subs	r4, #87	; 0x57
 80043ce:	e7db      	b.n	8004388 <_strtol_l.constprop.0+0x78>
 80043d0:	f04f 3cff 	mov.w	ip, #4294967295
 80043d4:	e7e6      	b.n	80043a4 <_strtol_l.constprop.0+0x94>
 80043d6:	f1bc 0f00 	cmp.w	ip, #0
 80043da:	da05      	bge.n	80043e8 <_strtol_l.constprop.0+0xd8>
 80043dc:	2322      	movs	r3, #34	; 0x22
 80043de:	6003      	str	r3, [r0, #0]
 80043e0:	4646      	mov	r6, r8
 80043e2:	b942      	cbnz	r2, 80043f6 <_strtol_l.constprop.0+0xe6>
 80043e4:	4630      	mov	r0, r6
 80043e6:	e79e      	b.n	8004326 <_strtol_l.constprop.0+0x16>
 80043e8:	b107      	cbz	r7, 80043ec <_strtol_l.constprop.0+0xdc>
 80043ea:	4276      	negs	r6, r6
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	d0f9      	beq.n	80043e4 <_strtol_l.constprop.0+0xd4>
 80043f0:	f1bc 0f00 	cmp.w	ip, #0
 80043f4:	d000      	beq.n	80043f8 <_strtol_l.constprop.0+0xe8>
 80043f6:	1e69      	subs	r1, r5, #1
 80043f8:	6011      	str	r1, [r2, #0]
 80043fa:	e7f3      	b.n	80043e4 <_strtol_l.constprop.0+0xd4>
 80043fc:	2430      	movs	r4, #48	; 0x30
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1b1      	bne.n	8004366 <_strtol_l.constprop.0+0x56>
 8004402:	2308      	movs	r3, #8
 8004404:	e7af      	b.n	8004366 <_strtol_l.constprop.0+0x56>
 8004406:	2c30      	cmp	r4, #48	; 0x30
 8004408:	d0a5      	beq.n	8004356 <_strtol_l.constprop.0+0x46>
 800440a:	230a      	movs	r3, #10
 800440c:	e7ab      	b.n	8004366 <_strtol_l.constprop.0+0x56>
 800440e:	bf00      	nop
 8004410:	08005591 	.word	0x08005591

08004414 <strtol>:
 8004414:	4613      	mov	r3, r2
 8004416:	460a      	mov	r2, r1
 8004418:	4601      	mov	r1, r0
 800441a:	4802      	ldr	r0, [pc, #8]	; (8004424 <strtol+0x10>)
 800441c:	6800      	ldr	r0, [r0, #0]
 800441e:	f7ff bf77 	b.w	8004310 <_strtol_l.constprop.0>
 8004422:	bf00      	nop
 8004424:	2000000c 	.word	0x2000000c

08004428 <cos>:
 8004428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800442a:	ec53 2b10 	vmov	r2, r3, d0
 800442e:	4826      	ldr	r0, [pc, #152]	; (80044c8 <cos+0xa0>)
 8004430:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004434:	4281      	cmp	r1, r0
 8004436:	dc06      	bgt.n	8004446 <cos+0x1e>
 8004438:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80044c0 <cos+0x98>
 800443c:	b005      	add	sp, #20
 800443e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004442:	f000 baa9 	b.w	8004998 <__kernel_cos>
 8004446:	4821      	ldr	r0, [pc, #132]	; (80044cc <cos+0xa4>)
 8004448:	4281      	cmp	r1, r0
 800444a:	dd09      	ble.n	8004460 <cos+0x38>
 800444c:	ee10 0a10 	vmov	r0, s0
 8004450:	4619      	mov	r1, r3
 8004452:	f7fb fec5 	bl	80001e0 <__aeabi_dsub>
 8004456:	ec41 0b10 	vmov	d0, r0, r1
 800445a:	b005      	add	sp, #20
 800445c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004460:	4668      	mov	r0, sp
 8004462:	f000 f88d 	bl	8004580 <__ieee754_rem_pio2>
 8004466:	f000 0003 	and.w	r0, r0, #3
 800446a:	2801      	cmp	r0, #1
 800446c:	d00b      	beq.n	8004486 <cos+0x5e>
 800446e:	2802      	cmp	r0, #2
 8004470:	d016      	beq.n	80044a0 <cos+0x78>
 8004472:	b9e0      	cbnz	r0, 80044ae <cos+0x86>
 8004474:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004478:	ed9d 0b00 	vldr	d0, [sp]
 800447c:	f000 fa8c 	bl	8004998 <__kernel_cos>
 8004480:	ec51 0b10 	vmov	r0, r1, d0
 8004484:	e7e7      	b.n	8004456 <cos+0x2e>
 8004486:	ed9d 1b02 	vldr	d1, [sp, #8]
 800448a:	ed9d 0b00 	vldr	d0, [sp]
 800448e:	f000 fe9b 	bl	80051c8 <__kernel_sin>
 8004492:	ec53 2b10 	vmov	r2, r3, d0
 8004496:	ee10 0a10 	vmov	r0, s0
 800449a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800449e:	e7da      	b.n	8004456 <cos+0x2e>
 80044a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044a4:	ed9d 0b00 	vldr	d0, [sp]
 80044a8:	f000 fa76 	bl	8004998 <__kernel_cos>
 80044ac:	e7f1      	b.n	8004492 <cos+0x6a>
 80044ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044b2:	ed9d 0b00 	vldr	d0, [sp]
 80044b6:	2001      	movs	r0, #1
 80044b8:	f000 fe86 	bl	80051c8 <__kernel_sin>
 80044bc:	e7e0      	b.n	8004480 <cos+0x58>
 80044be:	bf00      	nop
	...
 80044c8:	3fe921fb 	.word	0x3fe921fb
 80044cc:	7fefffff 	.word	0x7fefffff

080044d0 <sin>:
 80044d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044d2:	ec53 2b10 	vmov	r2, r3, d0
 80044d6:	4828      	ldr	r0, [pc, #160]	; (8004578 <sin+0xa8>)
 80044d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044dc:	4281      	cmp	r1, r0
 80044de:	dc07      	bgt.n	80044f0 <sin+0x20>
 80044e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004570 <sin+0xa0>
 80044e4:	2000      	movs	r0, #0
 80044e6:	b005      	add	sp, #20
 80044e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ec:	f000 be6c 	b.w	80051c8 <__kernel_sin>
 80044f0:	4822      	ldr	r0, [pc, #136]	; (800457c <sin+0xac>)
 80044f2:	4281      	cmp	r1, r0
 80044f4:	dd09      	ble.n	800450a <sin+0x3a>
 80044f6:	ee10 0a10 	vmov	r0, s0
 80044fa:	4619      	mov	r1, r3
 80044fc:	f7fb fe70 	bl	80001e0 <__aeabi_dsub>
 8004500:	ec41 0b10 	vmov	d0, r0, r1
 8004504:	b005      	add	sp, #20
 8004506:	f85d fb04 	ldr.w	pc, [sp], #4
 800450a:	4668      	mov	r0, sp
 800450c:	f000 f838 	bl	8004580 <__ieee754_rem_pio2>
 8004510:	f000 0003 	and.w	r0, r0, #3
 8004514:	2801      	cmp	r0, #1
 8004516:	d00c      	beq.n	8004532 <sin+0x62>
 8004518:	2802      	cmp	r0, #2
 800451a:	d011      	beq.n	8004540 <sin+0x70>
 800451c:	b9f0      	cbnz	r0, 800455c <sin+0x8c>
 800451e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004522:	ed9d 0b00 	vldr	d0, [sp]
 8004526:	2001      	movs	r0, #1
 8004528:	f000 fe4e 	bl	80051c8 <__kernel_sin>
 800452c:	ec51 0b10 	vmov	r0, r1, d0
 8004530:	e7e6      	b.n	8004500 <sin+0x30>
 8004532:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004536:	ed9d 0b00 	vldr	d0, [sp]
 800453a:	f000 fa2d 	bl	8004998 <__kernel_cos>
 800453e:	e7f5      	b.n	800452c <sin+0x5c>
 8004540:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004544:	ed9d 0b00 	vldr	d0, [sp]
 8004548:	2001      	movs	r0, #1
 800454a:	f000 fe3d 	bl	80051c8 <__kernel_sin>
 800454e:	ec53 2b10 	vmov	r2, r3, d0
 8004552:	ee10 0a10 	vmov	r0, s0
 8004556:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800455a:	e7d1      	b.n	8004500 <sin+0x30>
 800455c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004560:	ed9d 0b00 	vldr	d0, [sp]
 8004564:	f000 fa18 	bl	8004998 <__kernel_cos>
 8004568:	e7f1      	b.n	800454e <sin+0x7e>
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w
	...
 8004578:	3fe921fb 	.word	0x3fe921fb
 800457c:	7fefffff 	.word	0x7fefffff

08004580 <__ieee754_rem_pio2>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	ed2d 8b02 	vpush	{d8}
 8004588:	ec55 4b10 	vmov	r4, r5, d0
 800458c:	4bca      	ldr	r3, [pc, #808]	; (80048b8 <__ieee754_rem_pio2+0x338>)
 800458e:	b08b      	sub	sp, #44	; 0x2c
 8004590:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004594:	4598      	cmp	r8, r3
 8004596:	4682      	mov	sl, r0
 8004598:	9502      	str	r5, [sp, #8]
 800459a:	dc08      	bgt.n	80045ae <__ieee754_rem_pio2+0x2e>
 800459c:	2200      	movs	r2, #0
 800459e:	2300      	movs	r3, #0
 80045a0:	ed80 0b00 	vstr	d0, [r0]
 80045a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80045a8:	f04f 0b00 	mov.w	fp, #0
 80045ac:	e028      	b.n	8004600 <__ieee754_rem_pio2+0x80>
 80045ae:	4bc3      	ldr	r3, [pc, #780]	; (80048bc <__ieee754_rem_pio2+0x33c>)
 80045b0:	4598      	cmp	r8, r3
 80045b2:	dc78      	bgt.n	80046a6 <__ieee754_rem_pio2+0x126>
 80045b4:	9b02      	ldr	r3, [sp, #8]
 80045b6:	4ec2      	ldr	r6, [pc, #776]	; (80048c0 <__ieee754_rem_pio2+0x340>)
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	ee10 0a10 	vmov	r0, s0
 80045be:	a3b0      	add	r3, pc, #704	; (adr r3, 8004880 <__ieee754_rem_pio2+0x300>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	4629      	mov	r1, r5
 80045c6:	dd39      	ble.n	800463c <__ieee754_rem_pio2+0xbc>
 80045c8:	f7fb fe0a 	bl	80001e0 <__aeabi_dsub>
 80045cc:	45b0      	cmp	r8, r6
 80045ce:	4604      	mov	r4, r0
 80045d0:	460d      	mov	r5, r1
 80045d2:	d01b      	beq.n	800460c <__ieee754_rem_pio2+0x8c>
 80045d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004888 <__ieee754_rem_pio2+0x308>)
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f7fb fe01 	bl	80001e0 <__aeabi_dsub>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	e9ca 2300 	strd	r2, r3, [sl]
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fb fdf9 	bl	80001e0 <__aeabi_dsub>
 80045ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8004888 <__ieee754_rem_pio2+0x308>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fb fdf4 	bl	80001e0 <__aeabi_dsub>
 80045f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045fc:	f04f 0b01 	mov.w	fp, #1
 8004600:	4658      	mov	r0, fp
 8004602:	b00b      	add	sp, #44	; 0x2c
 8004604:	ecbd 8b02 	vpop	{d8}
 8004608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004890 <__ieee754_rem_pio2+0x310>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fde5 	bl	80001e0 <__aeabi_dsub>
 8004616:	a3a0      	add	r3, pc, #640	; (adr r3, 8004898 <__ieee754_rem_pio2+0x318>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	4604      	mov	r4, r0
 800461e:	460d      	mov	r5, r1
 8004620:	f7fb fdde 	bl	80001e0 <__aeabi_dsub>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	e9ca 2300 	strd	r2, r3, [sl]
 800462c:	4620      	mov	r0, r4
 800462e:	4629      	mov	r1, r5
 8004630:	f7fb fdd6 	bl	80001e0 <__aeabi_dsub>
 8004634:	a398      	add	r3, pc, #608	; (adr r3, 8004898 <__ieee754_rem_pio2+0x318>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	e7db      	b.n	80045f4 <__ieee754_rem_pio2+0x74>
 800463c:	f7fb fdd2 	bl	80001e4 <__adddf3>
 8004640:	45b0      	cmp	r8, r6
 8004642:	4604      	mov	r4, r0
 8004644:	460d      	mov	r5, r1
 8004646:	d016      	beq.n	8004676 <__ieee754_rem_pio2+0xf6>
 8004648:	a38f      	add	r3, pc, #572	; (adr r3, 8004888 <__ieee754_rem_pio2+0x308>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fdc9 	bl	80001e4 <__adddf3>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	e9ca 2300 	strd	r2, r3, [sl]
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	f7fb fdbf 	bl	80001e0 <__aeabi_dsub>
 8004662:	a389      	add	r3, pc, #548	; (adr r3, 8004888 <__ieee754_rem_pio2+0x308>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb fdbc 	bl	80001e4 <__adddf3>
 800466c:	f04f 3bff 	mov.w	fp, #4294967295
 8004670:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004674:	e7c4      	b.n	8004600 <__ieee754_rem_pio2+0x80>
 8004676:	a386      	add	r3, pc, #536	; (adr r3, 8004890 <__ieee754_rem_pio2+0x310>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fb fdb2 	bl	80001e4 <__adddf3>
 8004680:	a385      	add	r3, pc, #532	; (adr r3, 8004898 <__ieee754_rem_pio2+0x318>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	f7fb fdab 	bl	80001e4 <__adddf3>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	e9ca 2300 	strd	r2, r3, [sl]
 8004696:	4620      	mov	r0, r4
 8004698:	4629      	mov	r1, r5
 800469a:	f7fb fda1 	bl	80001e0 <__aeabi_dsub>
 800469e:	a37e      	add	r3, pc, #504	; (adr r3, 8004898 <__ieee754_rem_pio2+0x318>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	e7e0      	b.n	8004668 <__ieee754_rem_pio2+0xe8>
 80046a6:	4b87      	ldr	r3, [pc, #540]	; (80048c4 <__ieee754_rem_pio2+0x344>)
 80046a8:	4598      	cmp	r8, r3
 80046aa:	f300 80d9 	bgt.w	8004860 <__ieee754_rem_pio2+0x2e0>
 80046ae:	f000 fe49 	bl	8005344 <fabs>
 80046b2:	ec55 4b10 	vmov	r4, r5, d0
 80046b6:	ee10 0a10 	vmov	r0, s0
 80046ba:	a379      	add	r3, pc, #484	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x320>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	4629      	mov	r1, r5
 80046c2:	f7fb ff45 	bl	8000550 <__aeabi_dmul>
 80046c6:	4b80      	ldr	r3, [pc, #512]	; (80048c8 <__ieee754_rem_pio2+0x348>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	f7fb fd8b 	bl	80001e4 <__adddf3>
 80046ce:	f7fc f9d9 	bl	8000a84 <__aeabi_d2iz>
 80046d2:	4683      	mov	fp, r0
 80046d4:	f7fb fed2 	bl	800047c <__aeabi_i2d>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	ec43 2b18 	vmov	d8, r2, r3
 80046e0:	a367      	add	r3, pc, #412	; (adr r3, 8004880 <__ieee754_rem_pio2+0x300>)
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f7fb ff33 	bl	8000550 <__aeabi_dmul>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4620      	mov	r0, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7fb fd75 	bl	80001e0 <__aeabi_dsub>
 80046f6:	a364      	add	r3, pc, #400	; (adr r3, 8004888 <__ieee754_rem_pio2+0x308>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	4606      	mov	r6, r0
 80046fe:	460f      	mov	r7, r1
 8004700:	ec51 0b18 	vmov	r0, r1, d8
 8004704:	f7fb ff24 	bl	8000550 <__aeabi_dmul>
 8004708:	f1bb 0f1f 	cmp.w	fp, #31
 800470c:	4604      	mov	r4, r0
 800470e:	460d      	mov	r5, r1
 8004710:	dc0d      	bgt.n	800472e <__ieee754_rem_pio2+0x1ae>
 8004712:	4b6e      	ldr	r3, [pc, #440]	; (80048cc <__ieee754_rem_pio2+0x34c>)
 8004714:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471c:	4543      	cmp	r3, r8
 800471e:	d006      	beq.n	800472e <__ieee754_rem_pio2+0x1ae>
 8004720:	4622      	mov	r2, r4
 8004722:	462b      	mov	r3, r5
 8004724:	4630      	mov	r0, r6
 8004726:	4639      	mov	r1, r7
 8004728:	f7fb fd5a 	bl	80001e0 <__aeabi_dsub>
 800472c:	e00f      	b.n	800474e <__ieee754_rem_pio2+0x1ce>
 800472e:	462b      	mov	r3, r5
 8004730:	4622      	mov	r2, r4
 8004732:	4630      	mov	r0, r6
 8004734:	4639      	mov	r1, r7
 8004736:	f7fb fd53 	bl	80001e0 <__aeabi_dsub>
 800473a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004744:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004748:	f1b8 0f10 	cmp.w	r8, #16
 800474c:	dc02      	bgt.n	8004754 <__ieee754_rem_pio2+0x1d4>
 800474e:	e9ca 0100 	strd	r0, r1, [sl]
 8004752:	e039      	b.n	80047c8 <__ieee754_rem_pio2+0x248>
 8004754:	a34e      	add	r3, pc, #312	; (adr r3, 8004890 <__ieee754_rem_pio2+0x310>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	ec51 0b18 	vmov	r0, r1, d8
 800475e:	f7fb fef7 	bl	8000550 <__aeabi_dmul>
 8004762:	4604      	mov	r4, r0
 8004764:	460d      	mov	r5, r1
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4630      	mov	r0, r6
 800476c:	4639      	mov	r1, r7
 800476e:	f7fb fd37 	bl	80001e0 <__aeabi_dsub>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4680      	mov	r8, r0
 8004778:	4689      	mov	r9, r1
 800477a:	4630      	mov	r0, r6
 800477c:	4639      	mov	r1, r7
 800477e:	f7fb fd2f 	bl	80001e0 <__aeabi_dsub>
 8004782:	4622      	mov	r2, r4
 8004784:	462b      	mov	r3, r5
 8004786:	f7fb fd2b 	bl	80001e0 <__aeabi_dsub>
 800478a:	a343      	add	r3, pc, #268	; (adr r3, 8004898 <__ieee754_rem_pio2+0x318>)
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	4604      	mov	r4, r0
 8004792:	460d      	mov	r5, r1
 8004794:	ec51 0b18 	vmov	r0, r1, d8
 8004798:	f7fb feda 	bl	8000550 <__aeabi_dmul>
 800479c:	4622      	mov	r2, r4
 800479e:	462b      	mov	r3, r5
 80047a0:	f7fb fd1e 	bl	80001e0 <__aeabi_dsub>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4604      	mov	r4, r0
 80047aa:	460d      	mov	r5, r1
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	f7fb fd16 	bl	80001e0 <__aeabi_dsub>
 80047b4:	9a03      	ldr	r2, [sp, #12]
 80047b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b31      	cmp	r3, #49	; 0x31
 80047be:	dc24      	bgt.n	800480a <__ieee754_rem_pio2+0x28a>
 80047c0:	e9ca 0100 	strd	r0, r1, [sl]
 80047c4:	4646      	mov	r6, r8
 80047c6:	464f      	mov	r7, r9
 80047c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80047cc:	4630      	mov	r0, r6
 80047ce:	4642      	mov	r2, r8
 80047d0:	464b      	mov	r3, r9
 80047d2:	4639      	mov	r1, r7
 80047d4:	f7fb fd04 	bl	80001e0 <__aeabi_dsub>
 80047d8:	462b      	mov	r3, r5
 80047da:	4622      	mov	r2, r4
 80047dc:	f7fb fd00 	bl	80001e0 <__aeabi_dsub>
 80047e0:	9b02      	ldr	r3, [sp, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047e8:	f6bf af0a 	bge.w	8004600 <__ieee754_rem_pio2+0x80>
 80047ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80047f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80047f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047f8:	f8ca 8000 	str.w	r8, [sl]
 80047fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8004800:	f8ca 300c 	str.w	r3, [sl, #12]
 8004804:	f1cb 0b00 	rsb	fp, fp, #0
 8004808:	e6fa      	b.n	8004600 <__ieee754_rem_pio2+0x80>
 800480a:	a327      	add	r3, pc, #156	; (adr r3, 80048a8 <__ieee754_rem_pio2+0x328>)
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	ec51 0b18 	vmov	r0, r1, d8
 8004814:	f7fb fe9c 	bl	8000550 <__aeabi_dmul>
 8004818:	4604      	mov	r4, r0
 800481a:	460d      	mov	r5, r1
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4640      	mov	r0, r8
 8004822:	4649      	mov	r1, r9
 8004824:	f7fb fcdc 	bl	80001e0 <__aeabi_dsub>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4606      	mov	r6, r0
 800482e:	460f      	mov	r7, r1
 8004830:	4640      	mov	r0, r8
 8004832:	4649      	mov	r1, r9
 8004834:	f7fb fcd4 	bl	80001e0 <__aeabi_dsub>
 8004838:	4622      	mov	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	f7fb fcd0 	bl	80001e0 <__aeabi_dsub>
 8004840:	a31b      	add	r3, pc, #108	; (adr r3, 80048b0 <__ieee754_rem_pio2+0x330>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	4604      	mov	r4, r0
 8004848:	460d      	mov	r5, r1
 800484a:	ec51 0b18 	vmov	r0, r1, d8
 800484e:	f7fb fe7f 	bl	8000550 <__aeabi_dmul>
 8004852:	4622      	mov	r2, r4
 8004854:	462b      	mov	r3, r5
 8004856:	f7fb fcc3 	bl	80001e0 <__aeabi_dsub>
 800485a:	4604      	mov	r4, r0
 800485c:	460d      	mov	r5, r1
 800485e:	e75f      	b.n	8004720 <__ieee754_rem_pio2+0x1a0>
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <__ieee754_rem_pio2+0x350>)
 8004862:	4598      	cmp	r8, r3
 8004864:	dd36      	ble.n	80048d4 <__ieee754_rem_pio2+0x354>
 8004866:	ee10 2a10 	vmov	r2, s0
 800486a:	462b      	mov	r3, r5
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fcb6 	bl	80001e0 <__aeabi_dsub>
 8004874:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004878:	e9ca 0100 	strd	r0, r1, [sl]
 800487c:	e694      	b.n	80045a8 <__ieee754_rem_pio2+0x28>
 800487e:	bf00      	nop
 8004880:	54400000 	.word	0x54400000
 8004884:	3ff921fb 	.word	0x3ff921fb
 8004888:	1a626331 	.word	0x1a626331
 800488c:	3dd0b461 	.word	0x3dd0b461
 8004890:	1a600000 	.word	0x1a600000
 8004894:	3dd0b461 	.word	0x3dd0b461
 8004898:	2e037073 	.word	0x2e037073
 800489c:	3ba3198a 	.word	0x3ba3198a
 80048a0:	6dc9c883 	.word	0x6dc9c883
 80048a4:	3fe45f30 	.word	0x3fe45f30
 80048a8:	2e000000 	.word	0x2e000000
 80048ac:	3ba3198a 	.word	0x3ba3198a
 80048b0:	252049c1 	.word	0x252049c1
 80048b4:	397b839a 	.word	0x397b839a
 80048b8:	3fe921fb 	.word	0x3fe921fb
 80048bc:	4002d97b 	.word	0x4002d97b
 80048c0:	3ff921fb 	.word	0x3ff921fb
 80048c4:	413921fb 	.word	0x413921fb
 80048c8:	3fe00000 	.word	0x3fe00000
 80048cc:	08005694 	.word	0x08005694
 80048d0:	7fefffff 	.word	0x7fefffff
 80048d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80048d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80048dc:	ee10 0a10 	vmov	r0, s0
 80048e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80048e4:	ee10 6a10 	vmov	r6, s0
 80048e8:	460f      	mov	r7, r1
 80048ea:	f7fc f8cb 	bl	8000a84 <__aeabi_d2iz>
 80048ee:	f7fb fdc5 	bl	800047c <__aeabi_i2d>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4630      	mov	r0, r6
 80048f8:	4639      	mov	r1, r7
 80048fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048fe:	f7fb fc6f 	bl	80001e0 <__aeabi_dsub>
 8004902:	4b23      	ldr	r3, [pc, #140]	; (8004990 <__ieee754_rem_pio2+0x410>)
 8004904:	2200      	movs	r2, #0
 8004906:	f7fb fe23 	bl	8000550 <__aeabi_dmul>
 800490a:	460f      	mov	r7, r1
 800490c:	4606      	mov	r6, r0
 800490e:	f7fc f8b9 	bl	8000a84 <__aeabi_d2iz>
 8004912:	f7fb fdb3 	bl	800047c <__aeabi_i2d>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4630      	mov	r0, r6
 800491c:	4639      	mov	r1, r7
 800491e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004922:	f7fb fc5d 	bl	80001e0 <__aeabi_dsub>
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <__ieee754_rem_pio2+0x410>)
 8004928:	2200      	movs	r2, #0
 800492a:	f7fb fe11 	bl	8000550 <__aeabi_dmul>
 800492e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004932:	ad04      	add	r5, sp, #16
 8004934:	f04f 0803 	mov.w	r8, #3
 8004938:	46a9      	mov	r9, r5
 800493a:	2600      	movs	r6, #0
 800493c:	2700      	movs	r7, #0
 800493e:	4632      	mov	r2, r6
 8004940:	463b      	mov	r3, r7
 8004942:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004946:	46c3      	mov	fp, r8
 8004948:	3d08      	subs	r5, #8
 800494a:	f108 38ff 	add.w	r8, r8, #4294967295
 800494e:	f7fc f867 	bl	8000a20 <__aeabi_dcmpeq>
 8004952:	2800      	cmp	r0, #0
 8004954:	d1f3      	bne.n	800493e <__ieee754_rem_pio2+0x3be>
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <__ieee754_rem_pio2+0x414>)
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	2302      	movs	r3, #2
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4622      	mov	r2, r4
 8004960:	465b      	mov	r3, fp
 8004962:	4651      	mov	r1, sl
 8004964:	4648      	mov	r0, r9
 8004966:	f000 f8df 	bl	8004b28 <__kernel_rem_pio2>
 800496a:	9b02      	ldr	r3, [sp, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	4683      	mov	fp, r0
 8004970:	f6bf ae46 	bge.w	8004600 <__ieee754_rem_pio2+0x80>
 8004974:	e9da 2100 	ldrd	r2, r1, [sl]
 8004978:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800497c:	e9ca 2300 	strd	r2, r3, [sl]
 8004980:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004988:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800498c:	e73a      	b.n	8004804 <__ieee754_rem_pio2+0x284>
 800498e:	bf00      	nop
 8004990:	41700000 	.word	0x41700000
 8004994:	08005714 	.word	0x08005714

08004998 <__kernel_cos>:
 8004998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	ec57 6b10 	vmov	r6, r7, d0
 80049a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80049a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80049a8:	ed8d 1b00 	vstr	d1, [sp]
 80049ac:	da07      	bge.n	80049be <__kernel_cos+0x26>
 80049ae:	ee10 0a10 	vmov	r0, s0
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fc f866 	bl	8000a84 <__aeabi_d2iz>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f000 8088 	beq.w	8004ace <__kernel_cos+0x136>
 80049be:	4632      	mov	r2, r6
 80049c0:	463b      	mov	r3, r7
 80049c2:	4630      	mov	r0, r6
 80049c4:	4639      	mov	r1, r7
 80049c6:	f7fb fdc3 	bl	8000550 <__aeabi_dmul>
 80049ca:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <__kernel_cos+0x178>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	460d      	mov	r5, r1
 80049d2:	f7fb fdbd 	bl	8000550 <__aeabi_dmul>
 80049d6:	a340      	add	r3, pc, #256	; (adr r3, 8004ad8 <__kernel_cos+0x140>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	4682      	mov	sl, r0
 80049de:	468b      	mov	fp, r1
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fdb4 	bl	8000550 <__aeabi_dmul>
 80049e8:	a33d      	add	r3, pc, #244	; (adr r3, 8004ae0 <__kernel_cos+0x148>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fbf9 	bl	80001e4 <__adddf3>
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f7fb fdab 	bl	8000550 <__aeabi_dmul>
 80049fa:	a33b      	add	r3, pc, #236	; (adr r3, 8004ae8 <__kernel_cos+0x150>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f7fb fbee 	bl	80001e0 <__aeabi_dsub>
 8004a04:	4622      	mov	r2, r4
 8004a06:	462b      	mov	r3, r5
 8004a08:	f7fb fda2 	bl	8000550 <__aeabi_dmul>
 8004a0c:	a338      	add	r3, pc, #224	; (adr r3, 8004af0 <__kernel_cos+0x158>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb fbe7 	bl	80001e4 <__adddf3>
 8004a16:	4622      	mov	r2, r4
 8004a18:	462b      	mov	r3, r5
 8004a1a:	f7fb fd99 	bl	8000550 <__aeabi_dmul>
 8004a1e:	a336      	add	r3, pc, #216	; (adr r3, 8004af8 <__kernel_cos+0x160>)
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f7fb fbdc 	bl	80001e0 <__aeabi_dsub>
 8004a28:	4622      	mov	r2, r4
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	f7fb fd90 	bl	8000550 <__aeabi_dmul>
 8004a30:	a333      	add	r3, pc, #204	; (adr r3, 8004b00 <__kernel_cos+0x168>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f7fb fbd5 	bl	80001e4 <__adddf3>
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	462b      	mov	r3, r5
 8004a3e:	f7fb fd87 	bl	8000550 <__aeabi_dmul>
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f7fb fd83 	bl	8000550 <__aeabi_dmul>
 8004a4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a4e:	4604      	mov	r4, r0
 8004a50:	460d      	mov	r5, r1
 8004a52:	4630      	mov	r0, r6
 8004a54:	4639      	mov	r1, r7
 8004a56:	f7fb fd7b 	bl	8000550 <__aeabi_dmul>
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7fb fbbd 	bl	80001e0 <__aeabi_dsub>
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <__kernel_cos+0x17c>)
 8004a68:	4598      	cmp	r8, r3
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	dc10      	bgt.n	8004a92 <__kernel_cos+0xfa>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4650      	mov	r0, sl
 8004a76:	4659      	mov	r1, fp
 8004a78:	f7fb fbb2 	bl	80001e0 <__aeabi_dsub>
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4926      	ldr	r1, [pc, #152]	; (8004b18 <__kernel_cos+0x180>)
 8004a80:	4602      	mov	r2, r0
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7fb fbac 	bl	80001e0 <__aeabi_dsub>
 8004a88:	ec41 0b10 	vmov	d0, r0, r1
 8004a8c:	b003      	add	sp, #12
 8004a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <__kernel_cos+0x184>)
 8004a94:	4920      	ldr	r1, [pc, #128]	; (8004b18 <__kernel_cos+0x180>)
 8004a96:	4598      	cmp	r8, r3
 8004a98:	bfcc      	ite	gt
 8004a9a:	4d21      	ldrgt	r5, [pc, #132]	; (8004b20 <__kernel_cos+0x188>)
 8004a9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004aa0:	2400      	movs	r4, #0
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fb fb9a 	bl	80001e0 <__aeabi_dsub>
 8004aac:	4622      	mov	r2, r4
 8004aae:	4680      	mov	r8, r0
 8004ab0:	4689      	mov	r9, r1
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	4659      	mov	r1, fp
 8004ab8:	f7fb fb92 	bl	80001e0 <__aeabi_dsub>
 8004abc:	4632      	mov	r2, r6
 8004abe:	463b      	mov	r3, r7
 8004ac0:	f7fb fb8e 	bl	80001e0 <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4640      	mov	r0, r8
 8004aca:	4649      	mov	r1, r9
 8004acc:	e7da      	b.n	8004a84 <__kernel_cos+0xec>
 8004ace:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004b08 <__kernel_cos+0x170>
 8004ad2:	e7db      	b.n	8004a8c <__kernel_cos+0xf4>
 8004ad4:	f3af 8000 	nop.w
 8004ad8:	be8838d4 	.word	0xbe8838d4
 8004adc:	bda8fae9 	.word	0xbda8fae9
 8004ae0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004ae4:	3e21ee9e 	.word	0x3e21ee9e
 8004ae8:	809c52ad 	.word	0x809c52ad
 8004aec:	3e927e4f 	.word	0x3e927e4f
 8004af0:	19cb1590 	.word	0x19cb1590
 8004af4:	3efa01a0 	.word	0x3efa01a0
 8004af8:	16c15177 	.word	0x16c15177
 8004afc:	3f56c16c 	.word	0x3f56c16c
 8004b00:	5555554c 	.word	0x5555554c
 8004b04:	3fa55555 	.word	0x3fa55555
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	3ff00000 	.word	0x3ff00000
 8004b10:	3fe00000 	.word	0x3fe00000
 8004b14:	3fd33332 	.word	0x3fd33332
 8004b18:	3ff00000 	.word	0x3ff00000
 8004b1c:	3fe90000 	.word	0x3fe90000
 8004b20:	3fd20000 	.word	0x3fd20000
 8004b24:	00000000 	.word	0x00000000

08004b28 <__kernel_rem_pio2>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	ed2d 8b02 	vpush	{d8}
 8004b30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004b34:	f112 0f14 	cmn.w	r2, #20
 8004b38:	9308      	str	r3, [sp, #32]
 8004b3a:	9101      	str	r1, [sp, #4]
 8004b3c:	4bc4      	ldr	r3, [pc, #784]	; (8004e50 <__kernel_rem_pio2+0x328>)
 8004b3e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004b40:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	9b08      	ldr	r3, [sp, #32]
 8004b4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b4e:	bfa8      	it	ge
 8004b50:	1ed4      	subge	r4, r2, #3
 8004b52:	9306      	str	r3, [sp, #24]
 8004b54:	bfb2      	itee	lt
 8004b56:	2400      	movlt	r4, #0
 8004b58:	2318      	movge	r3, #24
 8004b5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004b5e:	f06f 0317 	mvn.w	r3, #23
 8004b62:	fb04 3303 	mla	r3, r4, r3, r3
 8004b66:	eb03 0a02 	add.w	sl, r3, r2
 8004b6a:	9b02      	ldr	r3, [sp, #8]
 8004b6c:	9a06      	ldr	r2, [sp, #24]
 8004b6e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004e40 <__kernel_rem_pio2+0x318>
 8004b72:	eb03 0802 	add.w	r8, r3, r2
 8004b76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004b78:	1aa7      	subs	r7, r4, r2
 8004b7a:	ae22      	add	r6, sp, #136	; 0x88
 8004b7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004b80:	2500      	movs	r5, #0
 8004b82:	4545      	cmp	r5, r8
 8004b84:	dd13      	ble.n	8004bae <__kernel_rem_pio2+0x86>
 8004b86:	9b08      	ldr	r3, [sp, #32]
 8004b88:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004e40 <__kernel_rem_pio2+0x318>
 8004b8c:	aa22      	add	r2, sp, #136	; 0x88
 8004b8e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004b92:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	9b02      	ldr	r3, [sp, #8]
 8004b9c:	4598      	cmp	r8, r3
 8004b9e:	dc2f      	bgt.n	8004c00 <__kernel_rem_pio2+0xd8>
 8004ba0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004ba4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004ba8:	462f      	mov	r7, r5
 8004baa:	2600      	movs	r6, #0
 8004bac:	e01b      	b.n	8004be6 <__kernel_rem_pio2+0xbe>
 8004bae:	42ef      	cmn	r7, r5
 8004bb0:	d407      	bmi.n	8004bc2 <__kernel_rem_pio2+0x9a>
 8004bb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004bb6:	f7fb fc61 	bl	800047c <__aeabi_i2d>
 8004bba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	e7df      	b.n	8004b82 <__kernel_rem_pio2+0x5a>
 8004bc2:	ec51 0b18 	vmov	r0, r1, d8
 8004bc6:	e7f8      	b.n	8004bba <__kernel_rem_pio2+0x92>
 8004bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004bd0:	f7fb fcbe 	bl	8000550 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bdc:	f7fb fb02 	bl	80001e4 <__adddf3>
 8004be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be4:	3601      	adds	r6, #1
 8004be6:	9b06      	ldr	r3, [sp, #24]
 8004be8:	429e      	cmp	r6, r3
 8004bea:	f1a7 0708 	sub.w	r7, r7, #8
 8004bee:	ddeb      	ble.n	8004bc8 <__kernel_rem_pio2+0xa0>
 8004bf0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004bf4:	f108 0801 	add.w	r8, r8, #1
 8004bf8:	ecab 7b02 	vstmia	fp!, {d7}
 8004bfc:	3508      	adds	r5, #8
 8004bfe:	e7cc      	b.n	8004b9a <__kernel_rem_pio2+0x72>
 8004c00:	9b02      	ldr	r3, [sp, #8]
 8004c02:	aa0e      	add	r2, sp, #56	; 0x38
 8004c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c08:	930d      	str	r3, [sp, #52]	; 0x34
 8004c0a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004c0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004c10:	9c02      	ldr	r4, [sp, #8]
 8004c12:	930c      	str	r3, [sp, #48]	; 0x30
 8004c14:	00e3      	lsls	r3, r4, #3
 8004c16:	930a      	str	r3, [sp, #40]	; 0x28
 8004c18:	ab9a      	add	r3, sp, #616	; 0x268
 8004c1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c1e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004c22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004c26:	ab72      	add	r3, sp, #456	; 0x1c8
 8004c28:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004c2c:	46c3      	mov	fp, r8
 8004c2e:	46a1      	mov	r9, r4
 8004c30:	f1b9 0f00 	cmp.w	r9, #0
 8004c34:	f1a5 0508 	sub.w	r5, r5, #8
 8004c38:	dc77      	bgt.n	8004d2a <__kernel_rem_pio2+0x202>
 8004c3a:	ec47 6b10 	vmov	d0, r6, r7
 8004c3e:	4650      	mov	r0, sl
 8004c40:	f000 fc0a 	bl	8005458 <scalbn>
 8004c44:	ec57 6b10 	vmov	r6, r7, d0
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004c4e:	ee10 0a10 	vmov	r0, s0
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb fc7c 	bl	8000550 <__aeabi_dmul>
 8004c58:	ec41 0b10 	vmov	d0, r0, r1
 8004c5c:	f000 fb7c 	bl	8005358 <floor>
 8004c60:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <__kernel_rem_pio2+0x32c>)
 8004c62:	ec51 0b10 	vmov	r0, r1, d0
 8004c66:	2200      	movs	r2, #0
 8004c68:	f7fb fc72 	bl	8000550 <__aeabi_dmul>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fb fab4 	bl	80001e0 <__aeabi_dsub>
 8004c78:	460f      	mov	r7, r1
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	f7fb ff02 	bl	8000a84 <__aeabi_d2iz>
 8004c80:	9004      	str	r0, [sp, #16]
 8004c82:	f7fb fbfb 	bl	800047c <__aeabi_i2d>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	f7fb faa7 	bl	80001e0 <__aeabi_dsub>
 8004c92:	f1ba 0f00 	cmp.w	sl, #0
 8004c96:	4606      	mov	r6, r0
 8004c98:	460f      	mov	r7, r1
 8004c9a:	dd6d      	ble.n	8004d78 <__kernel_rem_pio2+0x250>
 8004c9c:	1e62      	subs	r2, r4, #1
 8004c9e:	ab0e      	add	r3, sp, #56	; 0x38
 8004ca0:	9d04      	ldr	r5, [sp, #16]
 8004ca2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ca6:	f1ca 0118 	rsb	r1, sl, #24
 8004caa:	fa40 f301 	asr.w	r3, r0, r1
 8004cae:	441d      	add	r5, r3
 8004cb0:	408b      	lsls	r3, r1
 8004cb2:	1ac0      	subs	r0, r0, r3
 8004cb4:	ab0e      	add	r3, sp, #56	; 0x38
 8004cb6:	9504      	str	r5, [sp, #16]
 8004cb8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004cbc:	f1ca 0317 	rsb	r3, sl, #23
 8004cc0:	fa40 fb03 	asr.w	fp, r0, r3
 8004cc4:	f1bb 0f00 	cmp.w	fp, #0
 8004cc8:	dd65      	ble.n	8004d96 <__kernel_rem_pio2+0x26e>
 8004cca:	9b04      	ldr	r3, [sp, #16]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	3301      	adds	r3, #1
 8004cd0:	9304      	str	r3, [sp, #16]
 8004cd2:	4615      	mov	r5, r2
 8004cd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004cd8:	4294      	cmp	r4, r2
 8004cda:	f300 809c 	bgt.w	8004e16 <__kernel_rem_pio2+0x2ee>
 8004cde:	f1ba 0f00 	cmp.w	sl, #0
 8004ce2:	dd07      	ble.n	8004cf4 <__kernel_rem_pio2+0x1cc>
 8004ce4:	f1ba 0f01 	cmp.w	sl, #1
 8004ce8:	f000 80c0 	beq.w	8004e6c <__kernel_rem_pio2+0x344>
 8004cec:	f1ba 0f02 	cmp.w	sl, #2
 8004cf0:	f000 80c6 	beq.w	8004e80 <__kernel_rem_pio2+0x358>
 8004cf4:	f1bb 0f02 	cmp.w	fp, #2
 8004cf8:	d14d      	bne.n	8004d96 <__kernel_rem_pio2+0x26e>
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4956      	ldr	r1, [pc, #344]	; (8004e58 <__kernel_rem_pio2+0x330>)
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7fb fa6d 	bl	80001e0 <__aeabi_dsub>
 8004d06:	4606      	mov	r6, r0
 8004d08:	460f      	mov	r7, r1
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	d043      	beq.n	8004d96 <__kernel_rem_pio2+0x26e>
 8004d0e:	4650      	mov	r0, sl
 8004d10:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004e48 <__kernel_rem_pio2+0x320>
 8004d14:	f000 fba0 	bl	8005458 <scalbn>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	ec53 2b10 	vmov	r2, r3, d0
 8004d20:	f7fb fa5e 	bl	80001e0 <__aeabi_dsub>
 8004d24:	4606      	mov	r6, r0
 8004d26:	460f      	mov	r7, r1
 8004d28:	e035      	b.n	8004d96 <__kernel_rem_pio2+0x26e>
 8004d2a:	4b4c      	ldr	r3, [pc, #304]	; (8004e5c <__kernel_rem_pio2+0x334>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb fc0d 	bl	8000550 <__aeabi_dmul>
 8004d36:	f7fb fea5 	bl	8000a84 <__aeabi_d2iz>
 8004d3a:	f7fb fb9f 	bl	800047c <__aeabi_i2d>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	ec43 2b18 	vmov	d8, r2, r3
 8004d46:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <__kernel_rem_pio2+0x338>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f7fb fc01 	bl	8000550 <__aeabi_dmul>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4630      	mov	r0, r6
 8004d54:	4639      	mov	r1, r7
 8004d56:	f7fb fa43 	bl	80001e0 <__aeabi_dsub>
 8004d5a:	f7fb fe93 	bl	8000a84 <__aeabi_d2iz>
 8004d5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d62:	f84b 0b04 	str.w	r0, [fp], #4
 8004d66:	ec51 0b18 	vmov	r0, r1, d8
 8004d6a:	f7fb fa3b 	bl	80001e4 <__adddf3>
 8004d6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004d72:	4606      	mov	r6, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	e75b      	b.n	8004c30 <__kernel_rem_pio2+0x108>
 8004d78:	d106      	bne.n	8004d88 <__kernel_rem_pio2+0x260>
 8004d7a:	1e63      	subs	r3, r4, #1
 8004d7c:	aa0e      	add	r2, sp, #56	; 0x38
 8004d7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d82:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004d86:	e79d      	b.n	8004cc4 <__kernel_rem_pio2+0x19c>
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <__kernel_rem_pio2+0x33c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f7fb fe66 	bl	8000a5c <__aeabi_dcmpge>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d13d      	bne.n	8004e10 <__kernel_rem_pio2+0x2e8>
 8004d94:	4683      	mov	fp, r0
 8004d96:	2200      	movs	r2, #0
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	f7fb fe3f 	bl	8000a20 <__aeabi_dcmpeq>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f000 80c0 	beq.w	8004f28 <__kernel_rem_pio2+0x400>
 8004da8:	1e65      	subs	r5, r4, #1
 8004daa:	462b      	mov	r3, r5
 8004dac:	2200      	movs	r2, #0
 8004dae:	9902      	ldr	r1, [sp, #8]
 8004db0:	428b      	cmp	r3, r1
 8004db2:	da6c      	bge.n	8004e8e <__kernel_rem_pio2+0x366>
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	f000 8089 	beq.w	8004ecc <__kernel_rem_pio2+0x3a4>
 8004dba:	ab0e      	add	r3, sp, #56	; 0x38
 8004dbc:	f1aa 0a18 	sub.w	sl, sl, #24
 8004dc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80ad 	beq.w	8004f24 <__kernel_rem_pio2+0x3fc>
 8004dca:	4650      	mov	r0, sl
 8004dcc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004e48 <__kernel_rem_pio2+0x320>
 8004dd0:	f000 fb42 	bl	8005458 <scalbn>
 8004dd4:	ab9a      	add	r3, sp, #616	; 0x268
 8004dd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004dda:	ec57 6b10 	vmov	r6, r7, d0
 8004dde:	00ec      	lsls	r4, r5, #3
 8004de0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004de4:	46aa      	mov	sl, r5
 8004de6:	f1ba 0f00 	cmp.w	sl, #0
 8004dea:	f280 80d6 	bge.w	8004f9a <__kernel_rem_pio2+0x472>
 8004dee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004e40 <__kernel_rem_pio2+0x318>
 8004df2:	462e      	mov	r6, r5
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	f2c0 8104 	blt.w	8005002 <__kernel_rem_pio2+0x4da>
 8004dfa:	ab72      	add	r3, sp, #456	; 0x1c8
 8004dfc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004e00:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004e68 <__kernel_rem_pio2+0x340>
 8004e04:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004e08:	f04f 0800 	mov.w	r8, #0
 8004e0c:	1baf      	subs	r7, r5, r6
 8004e0e:	e0ea      	b.n	8004fe6 <__kernel_rem_pio2+0x4be>
 8004e10:	f04f 0b02 	mov.w	fp, #2
 8004e14:	e759      	b.n	8004cca <__kernel_rem_pio2+0x1a2>
 8004e16:	f8d8 3000 	ldr.w	r3, [r8]
 8004e1a:	b955      	cbnz	r5, 8004e32 <__kernel_rem_pio2+0x30a>
 8004e1c:	b123      	cbz	r3, 8004e28 <__kernel_rem_pio2+0x300>
 8004e1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004e22:	f8c8 3000 	str.w	r3, [r8]
 8004e26:	2301      	movs	r3, #1
 8004e28:	3201      	adds	r2, #1
 8004e2a:	f108 0804 	add.w	r8, r8, #4
 8004e2e:	461d      	mov	r5, r3
 8004e30:	e752      	b.n	8004cd8 <__kernel_rem_pio2+0x1b0>
 8004e32:	1acb      	subs	r3, r1, r3
 8004e34:	f8c8 3000 	str.w	r3, [r8]
 8004e38:	462b      	mov	r3, r5
 8004e3a:	e7f5      	b.n	8004e28 <__kernel_rem_pio2+0x300>
 8004e3c:	f3af 8000 	nop.w
	...
 8004e4c:	3ff00000 	.word	0x3ff00000
 8004e50:	08005860 	.word	0x08005860
 8004e54:	40200000 	.word	0x40200000
 8004e58:	3ff00000 	.word	0x3ff00000
 8004e5c:	3e700000 	.word	0x3e700000
 8004e60:	41700000 	.word	0x41700000
 8004e64:	3fe00000 	.word	0x3fe00000
 8004e68:	08005820 	.word	0x08005820
 8004e6c:	1e62      	subs	r2, r4, #1
 8004e6e:	ab0e      	add	r3, sp, #56	; 0x38
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004e78:	a90e      	add	r1, sp, #56	; 0x38
 8004e7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004e7e:	e739      	b.n	8004cf4 <__kernel_rem_pio2+0x1cc>
 8004e80:	1e62      	subs	r2, r4, #1
 8004e82:	ab0e      	add	r3, sp, #56	; 0x38
 8004e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e8c:	e7f4      	b.n	8004e78 <__kernel_rem_pio2+0x350>
 8004e8e:	a90e      	add	r1, sp, #56	; 0x38
 8004e90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	430a      	orrs	r2, r1
 8004e98:	e789      	b.n	8004dae <__kernel_rem_pio2+0x286>
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d0fa      	beq.n	8004e9a <__kernel_rem_pio2+0x372>
 8004ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ea6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004eaa:	446a      	add	r2, sp
 8004eac:	3a98      	subs	r2, #152	; 0x98
 8004eae:	920a      	str	r2, [sp, #40]	; 0x28
 8004eb0:	9a08      	ldr	r2, [sp, #32]
 8004eb2:	18e3      	adds	r3, r4, r3
 8004eb4:	18a5      	adds	r5, r4, r2
 8004eb6:	aa22      	add	r2, sp, #136	; 0x88
 8004eb8:	f104 0801 	add.w	r8, r4, #1
 8004ebc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	4543      	cmp	r3, r8
 8004ec6:	da04      	bge.n	8004ed2 <__kernel_rem_pio2+0x3aa>
 8004ec8:	461c      	mov	r4, r3
 8004eca:	e6a3      	b.n	8004c14 <__kernel_rem_pio2+0xec>
 8004ecc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e7e4      	b.n	8004e9c <__kernel_rem_pio2+0x374>
 8004ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ed4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004ed8:	f7fb fad0 	bl	800047c <__aeabi_i2d>
 8004edc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee2:	46ab      	mov	fp, r5
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	f04f 0900 	mov.w	r9, #0
 8004eea:	2600      	movs	r6, #0
 8004eec:	2700      	movs	r7, #0
 8004eee:	9b06      	ldr	r3, [sp, #24]
 8004ef0:	4599      	cmp	r9, r3
 8004ef2:	dd06      	ble.n	8004f02 <__kernel_rem_pio2+0x3da>
 8004ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004efa:	f108 0801 	add.w	r8, r8, #1
 8004efe:	930a      	str	r3, [sp, #40]	; 0x28
 8004f00:	e7df      	b.n	8004ec2 <__kernel_rem_pio2+0x39a>
 8004f02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004f06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004f0a:	f7fb fb21 	bl	8000550 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4630      	mov	r0, r6
 8004f14:	4639      	mov	r1, r7
 8004f16:	f7fb f965 	bl	80001e4 <__adddf3>
 8004f1a:	f109 0901 	add.w	r9, r9, #1
 8004f1e:	4606      	mov	r6, r0
 8004f20:	460f      	mov	r7, r1
 8004f22:	e7e4      	b.n	8004eee <__kernel_rem_pio2+0x3c6>
 8004f24:	3d01      	subs	r5, #1
 8004f26:	e748      	b.n	8004dba <__kernel_rem_pio2+0x292>
 8004f28:	ec47 6b10 	vmov	d0, r6, r7
 8004f2c:	f1ca 0000 	rsb	r0, sl, #0
 8004f30:	f000 fa92 	bl	8005458 <scalbn>
 8004f34:	ec57 6b10 	vmov	r6, r7, d0
 8004f38:	4ba0      	ldr	r3, [pc, #640]	; (80051bc <__kernel_rem_pio2+0x694>)
 8004f3a:	ee10 0a10 	vmov	r0, s0
 8004f3e:	2200      	movs	r2, #0
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb fd8b 	bl	8000a5c <__aeabi_dcmpge>
 8004f46:	b1f8      	cbz	r0, 8004f88 <__kernel_rem_pio2+0x460>
 8004f48:	4b9d      	ldr	r3, [pc, #628]	; (80051c0 <__kernel_rem_pio2+0x698>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb fafe 	bl	8000550 <__aeabi_dmul>
 8004f54:	f7fb fd96 	bl	8000a84 <__aeabi_d2iz>
 8004f58:	4680      	mov	r8, r0
 8004f5a:	f7fb fa8f 	bl	800047c <__aeabi_i2d>
 8004f5e:	4b97      	ldr	r3, [pc, #604]	; (80051bc <__kernel_rem_pio2+0x694>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	f7fb faf5 	bl	8000550 <__aeabi_dmul>
 8004f66:	460b      	mov	r3, r1
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7fb f937 	bl	80001e0 <__aeabi_dsub>
 8004f72:	f7fb fd87 	bl	8000a84 <__aeabi_d2iz>
 8004f76:	1c65      	adds	r5, r4, #1
 8004f78:	ab0e      	add	r3, sp, #56	; 0x38
 8004f7a:	f10a 0a18 	add.w	sl, sl, #24
 8004f7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f82:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004f86:	e720      	b.n	8004dca <__kernel_rem_pio2+0x2a2>
 8004f88:	4630      	mov	r0, r6
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb fd7a 	bl	8000a84 <__aeabi_d2iz>
 8004f90:	ab0e      	add	r3, sp, #56	; 0x38
 8004f92:	4625      	mov	r5, r4
 8004f94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f98:	e717      	b.n	8004dca <__kernel_rem_pio2+0x2a2>
 8004f9a:	ab0e      	add	r3, sp, #56	; 0x38
 8004f9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004fa0:	f7fb fa6c 	bl	800047c <__aeabi_i2d>
 8004fa4:	4632      	mov	r2, r6
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	f7fb fad2 	bl	8000550 <__aeabi_dmul>
 8004fac:	4b84      	ldr	r3, [pc, #528]	; (80051c0 <__kernel_rem_pio2+0x698>)
 8004fae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb faca 	bl	8000550 <__aeabi_dmul>
 8004fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	e70f      	b.n	8004de6 <__kernel_rem_pio2+0x2be>
 8004fc6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004fca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004fce:	f7fb fabf 	bl	8000550 <__aeabi_dmul>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fda:	f7fb f903 	bl	80001e4 <__adddf3>
 8004fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fe2:	f108 0801 	add.w	r8, r8, #1
 8004fe6:	9b02      	ldr	r3, [sp, #8]
 8004fe8:	4598      	cmp	r8, r3
 8004fea:	dc01      	bgt.n	8004ff0 <__kernel_rem_pio2+0x4c8>
 8004fec:	45b8      	cmp	r8, r7
 8004fee:	ddea      	ble.n	8004fc6 <__kernel_rem_pio2+0x49e>
 8004ff0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004ff4:	ab4a      	add	r3, sp, #296	; 0x128
 8004ff6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004ffa:	ed87 7b00 	vstr	d7, [r7]
 8004ffe:	3e01      	subs	r6, #1
 8005000:	e6f8      	b.n	8004df4 <__kernel_rem_pio2+0x2cc>
 8005002:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005004:	2b02      	cmp	r3, #2
 8005006:	dc0b      	bgt.n	8005020 <__kernel_rem_pio2+0x4f8>
 8005008:	2b00      	cmp	r3, #0
 800500a:	dc35      	bgt.n	8005078 <__kernel_rem_pio2+0x550>
 800500c:	d059      	beq.n	80050c2 <__kernel_rem_pio2+0x59a>
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	f003 0007 	and.w	r0, r3, #7
 8005014:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005018:	ecbd 8b02 	vpop	{d8}
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005020:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005022:	2b03      	cmp	r3, #3
 8005024:	d1f3      	bne.n	800500e <__kernel_rem_pio2+0x4e6>
 8005026:	ab4a      	add	r3, sp, #296	; 0x128
 8005028:	4423      	add	r3, r4
 800502a:	9306      	str	r3, [sp, #24]
 800502c:	461c      	mov	r4, r3
 800502e:	469a      	mov	sl, r3
 8005030:	9502      	str	r5, [sp, #8]
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f1aa 0a08 	sub.w	sl, sl, #8
 800503a:	dc6b      	bgt.n	8005114 <__kernel_rem_pio2+0x5ec>
 800503c:	46aa      	mov	sl, r5
 800503e:	f1ba 0f01 	cmp.w	sl, #1
 8005042:	f1a4 0408 	sub.w	r4, r4, #8
 8005046:	f300 8085 	bgt.w	8005154 <__kernel_rem_pio2+0x62c>
 800504a:	9c06      	ldr	r4, [sp, #24]
 800504c:	2000      	movs	r0, #0
 800504e:	3408      	adds	r4, #8
 8005050:	2100      	movs	r1, #0
 8005052:	2d01      	cmp	r5, #1
 8005054:	f300 809d 	bgt.w	8005192 <__kernel_rem_pio2+0x66a>
 8005058:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800505c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005060:	f1bb 0f00 	cmp.w	fp, #0
 8005064:	f040 809b 	bne.w	800519e <__kernel_rem_pio2+0x676>
 8005068:	9b01      	ldr	r3, [sp, #4]
 800506a:	e9c3 5600 	strd	r5, r6, [r3]
 800506e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005072:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005076:	e7ca      	b.n	800500e <__kernel_rem_pio2+0x4e6>
 8005078:	3408      	adds	r4, #8
 800507a:	ab4a      	add	r3, sp, #296	; 0x128
 800507c:	441c      	add	r4, r3
 800507e:	462e      	mov	r6, r5
 8005080:	2000      	movs	r0, #0
 8005082:	2100      	movs	r1, #0
 8005084:	2e00      	cmp	r6, #0
 8005086:	da36      	bge.n	80050f6 <__kernel_rem_pio2+0x5ce>
 8005088:	f1bb 0f00 	cmp.w	fp, #0
 800508c:	d039      	beq.n	8005102 <__kernel_rem_pio2+0x5da>
 800508e:	4602      	mov	r2, r0
 8005090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005094:	9c01      	ldr	r4, [sp, #4]
 8005096:	e9c4 2300 	strd	r2, r3, [r4]
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80050a2:	f7fb f89d 	bl	80001e0 <__aeabi_dsub>
 80050a6:	ae4c      	add	r6, sp, #304	; 0x130
 80050a8:	2401      	movs	r4, #1
 80050aa:	42a5      	cmp	r5, r4
 80050ac:	da2c      	bge.n	8005108 <__kernel_rem_pio2+0x5e0>
 80050ae:	f1bb 0f00 	cmp.w	fp, #0
 80050b2:	d002      	beq.n	80050ba <__kernel_rem_pio2+0x592>
 80050b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050b8:	4619      	mov	r1, r3
 80050ba:	9b01      	ldr	r3, [sp, #4]
 80050bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80050c0:	e7a5      	b.n	800500e <__kernel_rem_pio2+0x4e6>
 80050c2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80050c6:	eb0d 0403 	add.w	r4, sp, r3
 80050ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80050ce:	2000      	movs	r0, #0
 80050d0:	2100      	movs	r1, #0
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	da09      	bge.n	80050ea <__kernel_rem_pio2+0x5c2>
 80050d6:	f1bb 0f00 	cmp.w	fp, #0
 80050da:	d002      	beq.n	80050e2 <__kernel_rem_pio2+0x5ba>
 80050dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050e0:	4619      	mov	r1, r3
 80050e2:	9b01      	ldr	r3, [sp, #4]
 80050e4:	e9c3 0100 	strd	r0, r1, [r3]
 80050e8:	e791      	b.n	800500e <__kernel_rem_pio2+0x4e6>
 80050ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80050ee:	f7fb f879 	bl	80001e4 <__adddf3>
 80050f2:	3d01      	subs	r5, #1
 80050f4:	e7ed      	b.n	80050d2 <__kernel_rem_pio2+0x5aa>
 80050f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80050fa:	f7fb f873 	bl	80001e4 <__adddf3>
 80050fe:	3e01      	subs	r6, #1
 8005100:	e7c0      	b.n	8005084 <__kernel_rem_pio2+0x55c>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e7c5      	b.n	8005094 <__kernel_rem_pio2+0x56c>
 8005108:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800510c:	f7fb f86a 	bl	80001e4 <__adddf3>
 8005110:	3401      	adds	r4, #1
 8005112:	e7ca      	b.n	80050aa <__kernel_rem_pio2+0x582>
 8005114:	e9da 8900 	ldrd	r8, r9, [sl]
 8005118:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800511c:	9b02      	ldr	r3, [sp, #8]
 800511e:	3b01      	subs	r3, #1
 8005120:	9302      	str	r3, [sp, #8]
 8005122:	4632      	mov	r2, r6
 8005124:	463b      	mov	r3, r7
 8005126:	4640      	mov	r0, r8
 8005128:	4649      	mov	r1, r9
 800512a:	f7fb f85b 	bl	80001e4 <__adddf3>
 800512e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4640      	mov	r0, r8
 8005138:	4649      	mov	r1, r9
 800513a:	f7fb f851 	bl	80001e0 <__aeabi_dsub>
 800513e:	4632      	mov	r2, r6
 8005140:	463b      	mov	r3, r7
 8005142:	f7fb f84f 	bl	80001e4 <__adddf3>
 8005146:	ed9d 7b08 	vldr	d7, [sp, #32]
 800514a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800514e:	ed8a 7b00 	vstr	d7, [sl]
 8005152:	e76e      	b.n	8005032 <__kernel_rem_pio2+0x50a>
 8005154:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005158:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800515c:	4640      	mov	r0, r8
 800515e:	4632      	mov	r2, r6
 8005160:	463b      	mov	r3, r7
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb f83e 	bl	80001e4 <__adddf3>
 8005168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fb f834 	bl	80001e0 <__aeabi_dsub>
 8005178:	4632      	mov	r2, r6
 800517a:	463b      	mov	r3, r7
 800517c:	f7fb f832 	bl	80001e4 <__adddf3>
 8005180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005188:	ed84 7b00 	vstr	d7, [r4]
 800518c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005190:	e755      	b.n	800503e <__kernel_rem_pio2+0x516>
 8005192:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005196:	f7fb f825 	bl	80001e4 <__adddf3>
 800519a:	3d01      	subs	r5, #1
 800519c:	e759      	b.n	8005052 <__kernel_rem_pio2+0x52a>
 800519e:	9b01      	ldr	r3, [sp, #4]
 80051a0:	9a01      	ldr	r2, [sp, #4]
 80051a2:	601d      	str	r5, [r3, #0]
 80051a4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80051a8:	605c      	str	r4, [r3, #4]
 80051aa:	609f      	str	r7, [r3, #8]
 80051ac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80051b0:	60d3      	str	r3, [r2, #12]
 80051b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051b6:	6110      	str	r0, [r2, #16]
 80051b8:	6153      	str	r3, [r2, #20]
 80051ba:	e728      	b.n	800500e <__kernel_rem_pio2+0x4e6>
 80051bc:	41700000 	.word	0x41700000
 80051c0:	3e700000 	.word	0x3e700000
 80051c4:	00000000 	.word	0x00000000

080051c8 <__kernel_sin>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	ed2d 8b04 	vpush	{d8-d9}
 80051d0:	eeb0 8a41 	vmov.f32	s16, s2
 80051d4:	eef0 8a61 	vmov.f32	s17, s3
 80051d8:	ec55 4b10 	vmov	r4, r5, d0
 80051dc:	b083      	sub	sp, #12
 80051de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80051e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80051e6:	9001      	str	r0, [sp, #4]
 80051e8:	da06      	bge.n	80051f8 <__kernel_sin+0x30>
 80051ea:	ee10 0a10 	vmov	r0, s0
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fb fc48 	bl	8000a84 <__aeabi_d2iz>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d051      	beq.n	800529c <__kernel_sin+0xd4>
 80051f8:	4622      	mov	r2, r4
 80051fa:	462b      	mov	r3, r5
 80051fc:	4620      	mov	r0, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	f7fb f9a6 	bl	8000550 <__aeabi_dmul>
 8005204:	4682      	mov	sl, r0
 8005206:	468b      	mov	fp, r1
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	f7fb f99e 	bl	8000550 <__aeabi_dmul>
 8005214:	a341      	add	r3, pc, #260	; (adr r3, 800531c <__kernel_sin+0x154>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	4680      	mov	r8, r0
 800521c:	4689      	mov	r9, r1
 800521e:	4650      	mov	r0, sl
 8005220:	4659      	mov	r1, fp
 8005222:	f7fb f995 	bl	8000550 <__aeabi_dmul>
 8005226:	a33f      	add	r3, pc, #252	; (adr r3, 8005324 <__kernel_sin+0x15c>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f7fa ffd8 	bl	80001e0 <__aeabi_dsub>
 8005230:	4652      	mov	r2, sl
 8005232:	465b      	mov	r3, fp
 8005234:	f7fb f98c 	bl	8000550 <__aeabi_dmul>
 8005238:	a33c      	add	r3, pc, #240	; (adr r3, 800532c <__kernel_sin+0x164>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fa ffd1 	bl	80001e4 <__adddf3>
 8005242:	4652      	mov	r2, sl
 8005244:	465b      	mov	r3, fp
 8005246:	f7fb f983 	bl	8000550 <__aeabi_dmul>
 800524a:	a33a      	add	r3, pc, #232	; (adr r3, 8005334 <__kernel_sin+0x16c>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffc6 	bl	80001e0 <__aeabi_dsub>
 8005254:	4652      	mov	r2, sl
 8005256:	465b      	mov	r3, fp
 8005258:	f7fb f97a 	bl	8000550 <__aeabi_dmul>
 800525c:	a337      	add	r3, pc, #220	; (adr r3, 800533c <__kernel_sin+0x174>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fa ffbf 	bl	80001e4 <__adddf3>
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	4606      	mov	r6, r0
 800526a:	460f      	mov	r7, r1
 800526c:	b9eb      	cbnz	r3, 80052aa <__kernel_sin+0xe2>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4650      	mov	r0, sl
 8005274:	4659      	mov	r1, fp
 8005276:	f7fb f96b 	bl	8000550 <__aeabi_dmul>
 800527a:	a325      	add	r3, pc, #148	; (adr r3, 8005310 <__kernel_sin+0x148>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fa ffae 	bl	80001e0 <__aeabi_dsub>
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	f7fb f962 	bl	8000550 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4620      	mov	r0, r4
 8005292:	4629      	mov	r1, r5
 8005294:	f7fa ffa6 	bl	80001e4 <__adddf3>
 8005298:	4604      	mov	r4, r0
 800529a:	460d      	mov	r5, r1
 800529c:	ec45 4b10 	vmov	d0, r4, r5
 80052a0:	b003      	add	sp, #12
 80052a2:	ecbd 8b04 	vpop	{d8-d9}
 80052a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <__kernel_sin+0x150>)
 80052ac:	ec51 0b18 	vmov	r0, r1, d8
 80052b0:	2200      	movs	r2, #0
 80052b2:	f7fb f94d 	bl	8000550 <__aeabi_dmul>
 80052b6:	4632      	mov	r2, r6
 80052b8:	ec41 0b19 	vmov	d9, r0, r1
 80052bc:	463b      	mov	r3, r7
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fb f945 	bl	8000550 <__aeabi_dmul>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	ec51 0b19 	vmov	r0, r1, d9
 80052ce:	f7fa ff87 	bl	80001e0 <__aeabi_dsub>
 80052d2:	4652      	mov	r2, sl
 80052d4:	465b      	mov	r3, fp
 80052d6:	f7fb f93b 	bl	8000550 <__aeabi_dmul>
 80052da:	ec53 2b18 	vmov	r2, r3, d8
 80052de:	f7fa ff7f 	bl	80001e0 <__aeabi_dsub>
 80052e2:	a30b      	add	r3, pc, #44	; (adr r3, 8005310 <__kernel_sin+0x148>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	4606      	mov	r6, r0
 80052ea:	460f      	mov	r7, r1
 80052ec:	4640      	mov	r0, r8
 80052ee:	4649      	mov	r1, r9
 80052f0:	f7fb f92e 	bl	8000550 <__aeabi_dmul>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fa ff72 	bl	80001e4 <__adddf3>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4620      	mov	r0, r4
 8005306:	4629      	mov	r1, r5
 8005308:	f7fa ff6a 	bl	80001e0 <__aeabi_dsub>
 800530c:	e7c4      	b.n	8005298 <__kernel_sin+0xd0>
 800530e:	bf00      	nop
 8005310:	55555549 	.word	0x55555549
 8005314:	3fc55555 	.word	0x3fc55555
 8005318:	3fe00000 	.word	0x3fe00000
 800531c:	5acfd57c 	.word	0x5acfd57c
 8005320:	3de5d93a 	.word	0x3de5d93a
 8005324:	8a2b9ceb 	.word	0x8a2b9ceb
 8005328:	3e5ae5e6 	.word	0x3e5ae5e6
 800532c:	57b1fe7d 	.word	0x57b1fe7d
 8005330:	3ec71de3 	.word	0x3ec71de3
 8005334:	19c161d5 	.word	0x19c161d5
 8005338:	3f2a01a0 	.word	0x3f2a01a0
 800533c:	1110f8a6 	.word	0x1110f8a6
 8005340:	3f811111 	.word	0x3f811111

08005344 <fabs>:
 8005344:	ec51 0b10 	vmov	r0, r1, d0
 8005348:	ee10 2a10 	vmov	r2, s0
 800534c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005350:	ec43 2b10 	vmov	d0, r2, r3
 8005354:	4770      	bx	lr
	...

08005358 <floor>:
 8005358:	ec51 0b10 	vmov	r0, r1, d0
 800535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005360:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005364:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005368:	2e13      	cmp	r6, #19
 800536a:	ee10 5a10 	vmov	r5, s0
 800536e:	ee10 8a10 	vmov	r8, s0
 8005372:	460c      	mov	r4, r1
 8005374:	dc32      	bgt.n	80053dc <floor+0x84>
 8005376:	2e00      	cmp	r6, #0
 8005378:	da14      	bge.n	80053a4 <floor+0x4c>
 800537a:	a333      	add	r3, pc, #204	; (adr r3, 8005448 <floor+0xf0>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fa ff30 	bl	80001e4 <__adddf3>
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	f7fb fb72 	bl	8000a70 <__aeabi_dcmpgt>
 800538c:	b138      	cbz	r0, 800539e <floor+0x46>
 800538e:	2c00      	cmp	r4, #0
 8005390:	da57      	bge.n	8005442 <floor+0xea>
 8005392:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005396:	431d      	orrs	r5, r3
 8005398:	d001      	beq.n	800539e <floor+0x46>
 800539a:	4c2d      	ldr	r4, [pc, #180]	; (8005450 <floor+0xf8>)
 800539c:	2500      	movs	r5, #0
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	e025      	b.n	80053f0 <floor+0x98>
 80053a4:	4f2b      	ldr	r7, [pc, #172]	; (8005454 <floor+0xfc>)
 80053a6:	4137      	asrs	r7, r6
 80053a8:	ea01 0307 	and.w	r3, r1, r7
 80053ac:	4303      	orrs	r3, r0
 80053ae:	d01f      	beq.n	80053f0 <floor+0x98>
 80053b0:	a325      	add	r3, pc, #148	; (adr r3, 8005448 <floor+0xf0>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fa ff15 	bl	80001e4 <__adddf3>
 80053ba:	2200      	movs	r2, #0
 80053bc:	2300      	movs	r3, #0
 80053be:	f7fb fb57 	bl	8000a70 <__aeabi_dcmpgt>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0eb      	beq.n	800539e <floor+0x46>
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	bfbe      	ittt	lt
 80053ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80053ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80053d2:	19a4      	addlt	r4, r4, r6
 80053d4:	ea24 0407 	bic.w	r4, r4, r7
 80053d8:	2500      	movs	r5, #0
 80053da:	e7e0      	b.n	800539e <floor+0x46>
 80053dc:	2e33      	cmp	r6, #51	; 0x33
 80053de:	dd0b      	ble.n	80053f8 <floor+0xa0>
 80053e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80053e4:	d104      	bne.n	80053f0 <floor+0x98>
 80053e6:	ee10 2a10 	vmov	r2, s0
 80053ea:	460b      	mov	r3, r1
 80053ec:	f7fa fefa 	bl	80001e4 <__adddf3>
 80053f0:	ec41 0b10 	vmov	d0, r0, r1
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005400:	fa23 f707 	lsr.w	r7, r3, r7
 8005404:	4207      	tst	r7, r0
 8005406:	d0f3      	beq.n	80053f0 <floor+0x98>
 8005408:	a30f      	add	r3, pc, #60	; (adr r3, 8005448 <floor+0xf0>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f7fa fee9 	bl	80001e4 <__adddf3>
 8005412:	2200      	movs	r2, #0
 8005414:	2300      	movs	r3, #0
 8005416:	f7fb fb2b 	bl	8000a70 <__aeabi_dcmpgt>
 800541a:	2800      	cmp	r0, #0
 800541c:	d0bf      	beq.n	800539e <floor+0x46>
 800541e:	2c00      	cmp	r4, #0
 8005420:	da02      	bge.n	8005428 <floor+0xd0>
 8005422:	2e14      	cmp	r6, #20
 8005424:	d103      	bne.n	800542e <floor+0xd6>
 8005426:	3401      	adds	r4, #1
 8005428:	ea25 0507 	bic.w	r5, r5, r7
 800542c:	e7b7      	b.n	800539e <floor+0x46>
 800542e:	2301      	movs	r3, #1
 8005430:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005434:	fa03 f606 	lsl.w	r6, r3, r6
 8005438:	4435      	add	r5, r6
 800543a:	4545      	cmp	r5, r8
 800543c:	bf38      	it	cc
 800543e:	18e4      	addcc	r4, r4, r3
 8005440:	e7f2      	b.n	8005428 <floor+0xd0>
 8005442:	2500      	movs	r5, #0
 8005444:	462c      	mov	r4, r5
 8005446:	e7aa      	b.n	800539e <floor+0x46>
 8005448:	8800759c 	.word	0x8800759c
 800544c:	7e37e43c 	.word	0x7e37e43c
 8005450:	bff00000 	.word	0xbff00000
 8005454:	000fffff 	.word	0x000fffff

08005458 <scalbn>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	ec55 4b10 	vmov	r4, r5, d0
 800545e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005462:	4606      	mov	r6, r0
 8005464:	462b      	mov	r3, r5
 8005466:	b99a      	cbnz	r2, 8005490 <scalbn+0x38>
 8005468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800546c:	4323      	orrs	r3, r4
 800546e:	d036      	beq.n	80054de <scalbn+0x86>
 8005470:	4b39      	ldr	r3, [pc, #228]	; (8005558 <scalbn+0x100>)
 8005472:	4629      	mov	r1, r5
 8005474:	ee10 0a10 	vmov	r0, s0
 8005478:	2200      	movs	r2, #0
 800547a:	f7fb f869 	bl	8000550 <__aeabi_dmul>
 800547e:	4b37      	ldr	r3, [pc, #220]	; (800555c <scalbn+0x104>)
 8005480:	429e      	cmp	r6, r3
 8005482:	4604      	mov	r4, r0
 8005484:	460d      	mov	r5, r1
 8005486:	da10      	bge.n	80054aa <scalbn+0x52>
 8005488:	a32b      	add	r3, pc, #172	; (adr r3, 8005538 <scalbn+0xe0>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	e03a      	b.n	8005506 <scalbn+0xae>
 8005490:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005494:	428a      	cmp	r2, r1
 8005496:	d10c      	bne.n	80054b2 <scalbn+0x5a>
 8005498:	ee10 2a10 	vmov	r2, s0
 800549c:	4620      	mov	r0, r4
 800549e:	4629      	mov	r1, r5
 80054a0:	f7fa fea0 	bl	80001e4 <__adddf3>
 80054a4:	4604      	mov	r4, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	e019      	b.n	80054de <scalbn+0x86>
 80054aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80054ae:	460b      	mov	r3, r1
 80054b0:	3a36      	subs	r2, #54	; 0x36
 80054b2:	4432      	add	r2, r6
 80054b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80054b8:	428a      	cmp	r2, r1
 80054ba:	dd08      	ble.n	80054ce <scalbn+0x76>
 80054bc:	2d00      	cmp	r5, #0
 80054be:	a120      	add	r1, pc, #128	; (adr r1, 8005540 <scalbn+0xe8>)
 80054c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054c4:	da1c      	bge.n	8005500 <scalbn+0xa8>
 80054c6:	a120      	add	r1, pc, #128	; (adr r1, 8005548 <scalbn+0xf0>)
 80054c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054cc:	e018      	b.n	8005500 <scalbn+0xa8>
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	dd08      	ble.n	80054e4 <scalbn+0x8c>
 80054d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80054de:	ec45 4b10 	vmov	d0, r4, r5
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80054e8:	da19      	bge.n	800551e <scalbn+0xc6>
 80054ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80054ee:	429e      	cmp	r6, r3
 80054f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80054f4:	dd0a      	ble.n	800550c <scalbn+0xb4>
 80054f6:	a112      	add	r1, pc, #72	; (adr r1, 8005540 <scalbn+0xe8>)
 80054f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e2      	bne.n	80054c6 <scalbn+0x6e>
 8005500:	a30f      	add	r3, pc, #60	; (adr r3, 8005540 <scalbn+0xe8>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fb f823 	bl	8000550 <__aeabi_dmul>
 800550a:	e7cb      	b.n	80054a4 <scalbn+0x4c>
 800550c:	a10a      	add	r1, pc, #40	; (adr r1, 8005538 <scalbn+0xe0>)
 800550e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0b8      	beq.n	8005488 <scalbn+0x30>
 8005516:	a10e      	add	r1, pc, #56	; (adr r1, 8005550 <scalbn+0xf8>)
 8005518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551c:	e7b4      	b.n	8005488 <scalbn+0x30>
 800551e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005522:	3236      	adds	r2, #54	; 0x36
 8005524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005528:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800552c:	4620      	mov	r0, r4
 800552e:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <scalbn+0x108>)
 8005530:	2200      	movs	r2, #0
 8005532:	e7e8      	b.n	8005506 <scalbn+0xae>
 8005534:	f3af 8000 	nop.w
 8005538:	c2f8f359 	.word	0xc2f8f359
 800553c:	01a56e1f 	.word	0x01a56e1f
 8005540:	8800759c 	.word	0x8800759c
 8005544:	7e37e43c 	.word	0x7e37e43c
 8005548:	8800759c 	.word	0x8800759c
 800554c:	fe37e43c 	.word	0xfe37e43c
 8005550:	c2f8f359 	.word	0xc2f8f359
 8005554:	81a56e1f 	.word	0x81a56e1f
 8005558:	43500000 	.word	0x43500000
 800555c:	ffff3cb0 	.word	0xffff3cb0
 8005560:	3c900000 	.word	0x3c900000

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
